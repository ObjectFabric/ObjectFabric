
package part02.objectmodel.generated.subPackage;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public class OtherCar extends com.objectfabric.TGeneratedFields32 {

    public OtherCar() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    public OtherCar(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected OtherCar(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_SUBPACKAGE_OTHERCAR_CLASS_ID);

    public static final int FIELD_COUNT = 0;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;

    /**
     * 
     */
    public final void openOtherWindow(int height) {
        openOtherWindow(height, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void openOtherWindow(int height, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            openOtherWindowImplementation(height);
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = openOtherWindowAsync(height, getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> openOtherWindowAsync(int height, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return openOtherWindowAsync(height, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> openOtherWindowAsync(int height, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return openOtherWindowAsync(height, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> openOtherWindowAsync(int height, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Exception exception_ = null;

            try {
                openOtherWindowImplementation(height);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            part02.objectmodel.generated.MyObjectModel.Method4.Version version_ = (part02.objectmodel.generated.MyObjectModel.Method4.Version) createVersion_objectfabric(part02.objectmodel.generated.MyObjectModel.Method4.INSTANCE);

            if (height != 0) {
                version_._height = height;
                version_.setBit(part02.objectmodel.generated.MyObjectModel.Method4.HEIGHT_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, part02.objectmodel.generated.MyObjectModel.Method4.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void openOtherWindowImplementation(int height) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void openOtherWindowImplementationAsync(int height, com.objectfabric.MethodCall call) {
        try {
            openOtherWindowImplementation(height);
            call.set(null);
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                part02.objectmodel.generated.MyObjectModel.Method4.Version version_ = (part02.objectmodel.generated.MyObjectModel.Method4.Version) getMethodVersion_objectfabric(call);
                int height = version_ != null ? (int) version_._height : 0;

                try {
                    openOtherWindowImplementationAsync(height, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((part02.objectmodel.generated.MyObjectModel.Method4.Version) version)._error_objectfabric = error;
                ((part02.objectmodel.generated.MyObjectModel.Method4.Version) version).setBit(part02.objectmodel.generated.MyObjectModel.Method4.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                part02.objectmodel.generated.MyObjectModel.Method4.Version version = (part02.objectmodel.generated.MyObjectModel.Method4.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            OtherCar.Version merged = (OtherCar.Version) super.merge(target, next, flags);
            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new OtherCar.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_SUBPACKAGE_OTHERCAR_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return part02.objectmodel.generated.MyObjectModel.getInstance();
        }
    }
}

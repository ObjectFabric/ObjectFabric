
package part02.objectmodel.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public class Car extends com.objectfabric.TGeneratedFields32 {

    public Car(java.lang.String brand) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), brand);
    }

    public Car(com.objectfabric.Transaction trunk, java.lang.String brand) {
        this(trunk, brand, new com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings>(trunk), new com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>>(trunk));
    }

    public Car(java.lang.String brand, com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings> settings, com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>> log) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), brand, settings, log);
    }

    public Car(com.objectfabric.Transaction trunk, java.lang.String brand, com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings> settings, com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>> log) {
        this(new Version(null, FIELD_COUNT), trunk, brand, settings, log);
    }

    protected Car(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk, java.lang.String brand, com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings> settings, com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>> log) {
        super(shared, trunk);

        ((Version) shared)._brand = brand;

        if (brand != null)
            ((Version) shared).setBit(BRAND_INDEX);

        ((Version) shared)._settings = shared.mergeTObject(((Version) shared)._settings, settings);

        if (settings != null)
            ((Version) shared).setBit(SETTINGS_INDEX);

        ((Version) shared)._log = shared.mergeTObject(((Version) shared)._log, log);

        if (log != null)
            ((Version) shared).setBit(LOG_INDEX);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_CAR_CLASS_ID);

    public final java.lang.String getText() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TEXT_INDEX);
        java.lang.String value = v != null ? v._text : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setText(java.lang.String value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._text = value;
        v.setBit(TEXT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.Integer getValue1() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, VALUE1_INDEX);
        java.lang.Integer value = v != null ? v._value1 : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setValue1(java.lang.Integer value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._value1 = value;
        v.setBit(VALUE1_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final int getValue2() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, VALUE2_INDEX);
        int value = v != null ? v._value2 : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setValue2(int value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._value2 = value;
        v.setBit(VALUE2_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final part02.objectmodel.generated.Driver getDriver() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, DRIVER_INDEX);
        part02.objectmodel.generated.Driver value = v != null ? (part02.objectmodel.generated.Driver) getUserTObject_objectfabric(v._driver) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setDriver(part02.objectmodel.generated.Driver value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._driver = value;
        v.setBit(DRIVER_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.String getBrand() {
        Version v = (Version) getSharedVersion_objectfabric();
        return v._brand;
    }

    public final com.objectfabric.TSet<part02.objectmodel.generated.Door> getDoors() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, DOORS_INDEX);
        com.objectfabric.TSet<part02.objectmodel.generated.Door> value = v != null ? (com.objectfabric.TSet<part02.objectmodel.generated.Door>) getUserTObject_objectfabric(v._doors) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setDoors(com.objectfabric.TSet<part02.objectmodel.generated.Door> value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._doors = value;
        v.setBit(DOORS_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings> getSettings() {
        Version v = (Version) getSharedVersion_objectfabric();
        return (com.objectfabric.TMap<part02.objectmodel.generated.Driver, part02.objectmodel.generated.Settings>) getUserTObject_objectfabric(v._settings);
    }

    public final com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>> getLog() {
        Version v = (Version) getSharedVersion_objectfabric();
        return (com.objectfabric.TMap<part02.objectmodel.generated.Driver, com.objectfabric.TList<java.lang.String>>) getUserTObject_objectfabric(v._log);
    }

    /** Value can only be immutable class or TObject. */
    public final java.lang.Object getTag() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TAG_INDEX);
        java.lang.Object value = v != null ? getUserTObject_objectfabric(v._tag) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    /** Value can only be immutable class or TObject. */
    public final void setTag(java.lang.Object value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._tag = value;
        v.setBit(TAG_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int TEXT_INDEX = 0;

    public static final java.lang.String TEXT_NAME = "text";

    public static final java.lang.Class TEXT_CLASS = java.lang.String.class;

    public static final int VALUE1_INDEX = 1;

    public static final java.lang.String VALUE1_NAME = "value1";

    public static final java.lang.Class VALUE1_CLASS = java.lang.Integer.class;

    public static final int VALUE2_INDEX = 2;

    public static final java.lang.String VALUE2_NAME = "value2";

    public static final java.lang.Class VALUE2_CLASS = int.class;

    public static final int DRIVER_INDEX = 3;

    public static final java.lang.String DRIVER_NAME = "driver";

    public static final java.lang.Class DRIVER_CLASS = part02.objectmodel.generated.Driver.class;

    public static final int BRAND_INDEX = 4;

    public static final java.lang.String BRAND_NAME = "brand";

    public static final java.lang.Class BRAND_CLASS = java.lang.String.class;

    public static final int DOORS_INDEX = 5;

    public static final java.lang.String DOORS_NAME = "doors";

    public static final java.lang.Class DOORS_CLASS = com.objectfabric.TSet.class;

    public static final int SETTINGS_INDEX = 6;

    public static final java.lang.String SETTINGS_NAME = "settings";

    public static final java.lang.Class SETTINGS_CLASS = com.objectfabric.TMap.class;

    public static final int LOG_INDEX = 7;

    public static final java.lang.String LOG_NAME = "log";

    public static final java.lang.Class LOG_CLASS = com.objectfabric.TMap.class;

    public static final int TAG_INDEX = 8;

    public static final java.lang.String TAG_NAME = "tag";

    public static final java.lang.Class TAG_CLASS = java.lang.Object.class;

    public static final int FIELD_COUNT = 9;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_NAME;
            case VALUE1_INDEX:
                return VALUE1_NAME;
            case VALUE2_INDEX:
                return VALUE2_NAME;
            case DRIVER_INDEX:
                return DRIVER_NAME;
            case BRAND_INDEX:
                return BRAND_NAME;
            case DOORS_INDEX:
                return DOORS_NAME;
            case SETTINGS_INDEX:
                return SETTINGS_NAME;
            case LOG_INDEX:
                return LOG_NAME;
            case TAG_INDEX:
                return TAG_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_CLASS;
            case VALUE1_INDEX:
                return VALUE1_CLASS;
            case VALUE2_INDEX:
                return VALUE2_CLASS;
            case DRIVER_INDEX:
                return DRIVER_CLASS;
            case BRAND_INDEX:
                return BRAND_CLASS;
            case DOORS_INDEX:
                return DOORS_CLASS;
            case SETTINGS_INDEX:
                return SETTINGS_CLASS;
            case LOG_INDEX:
                return LOG_CLASS;
            case TAG_INDEX:
                return TAG_CLASS;
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;

    protected static final int METHOD_1 = 1;

    /**
     * 
     */
    public final void start() {
        start(getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void start(java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            startImplementation();
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = startAsync(getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> startAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return startAsync(callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> startAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return startAsync(callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> startAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Exception exception_ = null;

            try {
                startImplementation();
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            part02.objectmodel.generated.MyObjectModel.Method0.Version version_ = (part02.objectmodel.generated.MyObjectModel.Method0.Version) createVersion_objectfabric(part02.objectmodel.generated.MyObjectModel.Method0.INSTANCE);

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, part02.objectmodel.generated.MyObjectModel.Method0.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void startImplementation() {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void startImplementationAsync(com.objectfabric.MethodCall call) {
        try {
            startImplementation();
            call.set(null);
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }


    /**
     * 
     */
    public final part02.objectmodel.generated.Key lend(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key) {
        return lend(friend, key, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final part02.objectmodel.generated.Key lend(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            return lendImplementation(friend, key);
        else {
            java.util.concurrent.Future<part02.objectmodel.generated.Key> future_ = lendAsync(friend, key, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<part02.objectmodel.generated.Key> lendAsync(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key, com.objectfabric.misc.AsyncCallback<part02.objectmodel.generated.Key> callback) {
        return lendAsync(friend, key, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<part02.objectmodel.generated.Key> lendAsync(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key, com.objectfabric.misc.AsyncCallback<part02.objectmodel.generated.Key> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return lendAsync(friend, key, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<part02.objectmodel.generated.Key> lendAsync(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key, com.objectfabric.misc.AsyncCallback<part02.objectmodel.generated.Key> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            part02.objectmodel.generated.Key result_ = null;
            java.lang.Exception exception_ = null;

            try {
                result_ = lendImplementation(friend, key);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            part02.objectmodel.generated.MyObjectModel.Method1.Version version_ = (part02.objectmodel.generated.MyObjectModel.Method1.Version) createVersion_objectfabric(part02.objectmodel.generated.MyObjectModel.Method1.INSTANCE);

            if (friend != null) {
                version_._friend = friend;
                version_.setBit(part02.objectmodel.generated.MyObjectModel.Method1.FRIEND_INDEX);
            }

            if (key != null) {
                version_._key = key;
                version_.setBit(part02.objectmodel.generated.MyObjectModel.Method1.KEY_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, part02.objectmodel.generated.MyObjectModel.Method1.INSTANCE, version_, METHOD_1, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected part02.objectmodel.generated.Key lendImplementation(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void lendImplementationAsync(part02.objectmodel.generated.Driver friend, part02.objectmodel.generated.Key key, com.objectfabric.MethodCall call) {
        try {
            call.set(lendImplementation(friend, key));
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                try {
                    startImplementationAsync(call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            case METHOD_1: {
                part02.objectmodel.generated.MyObjectModel.Method1.Version version_ = (part02.objectmodel.generated.MyObjectModel.Method1.Version) getMethodVersion_objectfabric(call);
                part02.objectmodel.generated.Driver friend = version_ != null ? (part02.objectmodel.generated.Driver) version_._friend : null;
                part02.objectmodel.generated.Key key = version_ != null ? (part02.objectmodel.generated.Key) version_._key : null;

                try {
                    lendImplementationAsync(friend, key, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                break;
            }
            case METHOD_1: {
                ((part02.objectmodel.generated.MyObjectModel.Method1.Version) version)._return_objectfabric = (part02.objectmodel.generated.Key) result;
                ((part02.objectmodel.generated.MyObjectModel.Method1.Version) version).setBit(part02.objectmodel.generated.MyObjectModel.Method1.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((part02.objectmodel.generated.MyObjectModel.Method0.Version) version)._error_objectfabric = error;
                ((part02.objectmodel.generated.MyObjectModel.Method0.Version) version).setBit(part02.objectmodel.generated.MyObjectModel.Method0.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_1: {
                ((part02.objectmodel.generated.MyObjectModel.Method1.Version) version)._error_objectfabric = error;
                ((part02.objectmodel.generated.MyObjectModel.Method1.Version) version).setBit(part02.objectmodel.generated.MyObjectModel.Method1.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                part02.objectmodel.generated.MyObjectModel.Method0.Version version = (part02.objectmodel.generated.MyObjectModel.Method0.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_1: {
                part02.objectmodel.generated.MyObjectModel.Method1.Version version = (part02.objectmodel.generated.MyObjectModel.Method1.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _text;

        public java.lang.Integer _value1;

        public int _value2;

        public com.objectfabric.TObject _driver;

        public java.lang.String _brand;

        public com.objectfabric.TObject _doors;

        public com.objectfabric.TObject _settings;

        public com.objectfabric.TObject _log;

        public java.lang.Object _tag;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, BRAND_INDEX);
            readOnlys = setBit(readOnlys, SETTINGS_INDEX);
            readOnlys = setBit(readOnlys, LOG_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case TEXT_INDEX:
                    return _text;
                case VALUE1_INDEX:
                    return _value1;
                case VALUE2_INDEX:
                    return _value2;
                case DRIVER_INDEX:
                    return getUserTObject_objectfabric(_driver);
                case BRAND_INDEX:
                    return _brand;
                case DOORS_INDEX:
                    return getUserTObject_objectfabric(_doors);
                case SETTINGS_INDEX:
                    return getUserTObject_objectfabric(_settings);
                case LOG_INDEX:
                    return getUserTObject_objectfabric(_log);
                case TAG_INDEX:
                    return _tag;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case TEXT_INDEX:
                    _text = (java.lang.String) value;
                    break;
                case VALUE1_INDEX:
                    _value1 = (java.lang.Integer) value;
                    break;
                case VALUE2_INDEX:
                    _value2 = ((java.lang.Integer) value).intValue();
                    break;
                case DRIVER_INDEX:
                    _driver = (part02.objectmodel.generated.Driver) value;
                    break;
                case BRAND_INDEX:
                    _brand = (java.lang.String) value;
                    break;
                case DOORS_INDEX:
                    _doors = (com.objectfabric.TSet) value;
                    break;
                case SETTINGS_INDEX:
                    _settings = (com.objectfabric.TMap) value;
                    break;
                case LOG_INDEX:
                    _log = (com.objectfabric.TMap) value;
                    break;
                case TAG_INDEX:
                    _tag = value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            Car.Version source = (Car.Version) next;
            Car.Version merged = (Car.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(TEXT_INDEX))
                    merged._text = source._text;

                if (source.getBit(VALUE1_INDEX))
                    merged._value1 = source._value1;

                if (source.getBit(VALUE2_INDEX))
                    merged._value2 = source._value2;

                if (source.getBit(DRIVER_INDEX))
                    merged._driver = mergeTObject(merged._driver, source._driver);

                if (source.getBit(BRAND_INDEX))
                    merged._brand = source._brand;

                if (source.getBit(DOORS_INDEX))
                    merged._doors = mergeTObject(merged._doors, source._doors);

                if (source.getBit(SETTINGS_INDEX))
                    merged._settings = mergeTObject(merged._settings, source._settings);

                if (source.getBit(LOG_INDEX))
                    merged._log = mergeTObject(merged._log, source._log);

                if (source.getBit(TAG_INDEX))
                    merged._tag = mergeObject(merged._tag, source._tag);
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case TEXT_INDEX: {
                    writer.writeString(_text);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case VALUE1_INDEX: {
                    if (!writer.canWriteIntegerBoxed()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeIntegerBoxed(_value1);
                    break;
                }
                case VALUE2_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_value2);
                    break;
                }
                case DRIVER_INDEX: {
                    writer.writeTObject(_driver);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case BRAND_INDEX: {
                    writer.writeString(_brand);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case DOORS_INDEX: {
                    writer.writeTObject(_doors);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case SETTINGS_INDEX: {
                    writer.writeTObject(_settings);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case LOG_INDEX: {
                    writer.writeTObject(_log);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case TAG_INDEX: {
                    writer.writeObject(_tag);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case TEXT_INDEX: {
                    _text = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case VALUE1_INDEX: {
                    if (!reader.canReadIntegerBoxed()) {
                        reader.interrupt(null);
                        return;
                    }

                    _value1 = reader.readIntegerBoxed();
                    break;
                }
                case VALUE2_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    _value2 = reader.readInteger();
                    break;
                }
                case DRIVER_INDEX: {
                    _driver = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case BRAND_INDEX: {
                    Car.Version shared = (Car.Version) getUnion();
                    shared._brand = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(BRAND_INDEX);
                    unsetBit(BRAND_INDEX);
                    break;
                }
                case DOORS_INDEX: {
                    _doors = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case SETTINGS_INDEX: {
                    Car.Version shared = (Car.Version) getUnion();
                    shared._settings = getSharedVersion_objectfabric(reader.readTObject());

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(SETTINGS_INDEX);
                    unsetBit(SETTINGS_INDEX);
                    break;
                }
                case LOG_INDEX: {
                    Car.Version shared = (Car.Version) getUnion();
                    shared._log = getSharedVersion_objectfabric(reader.readTObject());

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(LOG_INDEX);
                    unsetBit(LOG_INDEX);
                    break;
                }
                case TAG_INDEX: {
                    _tag = reader.readObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new Car.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_CAR_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return part02.objectmodel.generated.MyObjectModel.getInstance();
        }
    }
}


package part04.store.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public class StoredClass extends com.objectfabric.TGeneratedFields32 {

    public StoredClass() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    public StoredClass(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected StoredClass(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part04.store.generated.ObjectModel.getInstance(), part04.store.generated.ObjectModel.PART04_STORE_GENERATED_STOREDCLASS_CLASS_ID);

    public final java.lang.String getText() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TEXT_INDEX);
        java.lang.String value = v != null ? v._text : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setText(java.lang.String value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._text = value;
        v.setBit(TEXT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final com.objectfabric.TObject getReference() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, REFERENCE_INDEX);
        com.objectfabric.TObject value = v != null ? (com.objectfabric.TObject) getUserTObject_objectfabric(v._reference) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setReference(com.objectfabric.TObject value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._reference = value;
        v.setBit(REFERENCE_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final com.objectfabric.TSet<java.lang.String> getSet() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, SET_INDEX);
        com.objectfabric.TSet<java.lang.String> value = v != null ? (com.objectfabric.TSet<java.lang.String>) getUserTObject_objectfabric(v._set) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setSet(com.objectfabric.TSet<java.lang.String> value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._set = value;
        v.setBit(SET_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int TEXT_INDEX = 0;

    public static final java.lang.String TEXT_NAME = "text";

    public static final java.lang.Class TEXT_CLASS = java.lang.String.class;

    public static final int REFERENCE_INDEX = 1;

    public static final java.lang.String REFERENCE_NAME = "reference";

    public static final java.lang.Class REFERENCE_CLASS = com.objectfabric.TObject.class;

    public static final int SET_INDEX = 2;

    public static final java.lang.String SET_NAME = "set";

    public static final java.lang.Class SET_CLASS = com.objectfabric.TSet.class;

    public static final int FIELD_COUNT = 3;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_NAME;
            case REFERENCE_INDEX:
                return REFERENCE_NAME;
            case SET_INDEX:
                return SET_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_CLASS;
            case REFERENCE_INDEX:
                return REFERENCE_CLASS;
            case SET_INDEX:
                return SET_CLASS;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _text;

        public com.objectfabric.TObject _reference;

        public com.objectfabric.TObject _set;

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case TEXT_INDEX:
                    return _text;
                case REFERENCE_INDEX:
                    return getUserTObject_objectfabric(_reference);
                case SET_INDEX:
                    return getUserTObject_objectfabric(_set);
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case TEXT_INDEX:
                    _text = (java.lang.String) value;
                    break;
                case REFERENCE_INDEX:
                    _reference = (com.objectfabric.TObject) value;
                    break;
                case SET_INDEX:
                    _set = (com.objectfabric.TSet) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            StoredClass.Version source = (StoredClass.Version) next;
            StoredClass.Version merged = (StoredClass.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(TEXT_INDEX))
                    merged._text = source._text;

                if (source.getBit(REFERENCE_INDEX))
                    merged._reference = mergeTObject(merged._reference, source._reference);

                if (source.getBit(SET_INDEX))
                    merged._set = mergeTObject(merged._set, source._set);
            }

            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case TEXT_INDEX: {
                    writer.writeString(_text);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case REFERENCE_INDEX: {
                    writer.writeTObject(_reference);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case SET_INDEX: {
                    writer.writeTObject(_set);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case TEXT_INDEX: {
                    _text = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case REFERENCE_INDEX: {
                    _reference = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case SET_INDEX: {
                    _set = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new StoredClass.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return part04.store.generated.ObjectModel.PART04_STORE_GENERATED_STOREDCLASS_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return part04.store.generated.ObjectModel.getInstance();
        }
    }
}


package part02.objectmodel.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public class MyObjectModel extends com.objectfabric.ObjectModel {

    private static final byte[] UID = { -15, 34, 37, -50, 108, -97, 54, 22, 79, -16, -127, -90, -34, -79, 6, 11 };

    private static volatile MyObjectModel _instance;

    private static final Object _lock = new Object();

    protected MyObjectModel(com.objectfabric.TObject.Version shared) {
        super(shared);
    }

    protected MyObjectModel() {
        this(new Version(null));
    }

    public static MyObjectModel getInstance() {
        if (_instance == null) {
            synchronized (_lock) {
                if (_instance == null)
                    _instance = new MyObjectModel();
            }
        }

        return _instance;
    }

    public static byte[] getUID() {
        byte[] copy = new byte[UID.length];
        com.objectfabric.misc.PlatformAdapter.arraycopy(UID, 0, copy, 0, copy.length);
        return copy;
    }

    /**
     * Registers this object model so that its classes can be serialized by the
     * system.
     */
    public static void register() {
        register(getInstance());
    }

    /**
     * Registers an object model which can override <code>createInstance</code>
     * to let the system use your own derived classes. This is necessary e.g. to
     * implement remote methods on transactional objects.
     */
    public static void registerOverridenModel(MyObjectModel model) {
        synchronized (_lock) {
            if (_instance != null)
                throw new RuntimeException("Object model has already been registered. This method can only be called at program startup.");

            _instance = model;
        }

        register(model);
    }

    @Override
    protected java.lang.String getObjectFabricVersion() {
        return "0.8";
    }

    public static final int CLASS_COUNT = 8;

    public static final int PART02_OBJECTMODEL_GENERATED_BATTERY_CLASS_ID = 0;

    public static final int PART02_OBJECTMODEL_GENERATED_CAR_CLASS_ID = 1;

    public static final int PART02_OBJECTMODEL_GENERATED_DOOR_CLASS_ID = 2;

    public static final int PART02_OBJECTMODEL_GENERATED_DRIVER_CLASS_ID = 3;

    public static final int PART02_OBJECTMODEL_GENERATED_ELECTRICCAR_CLASS_ID = 4;

    public static final int PART02_OBJECTMODEL_GENERATED_KEY_CLASS_ID = 5;

    public static final int PART02_OBJECTMODEL_GENERATED_SUBPACKAGE_OTHERCAR_CLASS_ID = 6;

    public static final int PART02_OBJECTMODEL_GENERATED_SETTINGS_CLASS_ID = 7;

    public static final int METHOD_COUNT = 5;

    public static final int PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_0_ID = 8;

    public static final int PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_1_ID = 9;

    public static final int PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_2_ID = 10;

    public static final int PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_3_ID = 11;

    public static final int PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_4_ID = 12;

    @Override
    protected java.lang.Class getClass(int classId, com.objectfabric.TType[] genericParameters) {
        switch (classId) {
            case PART02_OBJECTMODEL_GENERATED_BATTERY_CLASS_ID:
                return part02.objectmodel.generated.Battery.class;
            case PART02_OBJECTMODEL_GENERATED_CAR_CLASS_ID:
                return part02.objectmodel.generated.Car.class;
            case PART02_OBJECTMODEL_GENERATED_DOOR_CLASS_ID:
                return part02.objectmodel.generated.Door.class;
            case PART02_OBJECTMODEL_GENERATED_DRIVER_CLASS_ID:
                return part02.objectmodel.generated.Driver.class;
            case PART02_OBJECTMODEL_GENERATED_ELECTRICCAR_CLASS_ID:
                return part02.objectmodel.generated.ElectricCar.class;
            case PART02_OBJECTMODEL_GENERATED_KEY_CLASS_ID:
                return part02.objectmodel.generated.Key.class;
            case PART02_OBJECTMODEL_GENERATED_SUBPACKAGE_OTHERCAR_CLASS_ID:
                return part02.objectmodel.generated.subPackage.OtherCar.class;
            case PART02_OBJECTMODEL_GENERATED_SETTINGS_CLASS_ID:
                return part02.objectmodel.generated.Settings.class;
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_0_ID:
                return Method0.class;
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_1_ID:
                return Method1.class;
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_2_ID:
                return Method2.class;
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_3_ID:
                return Method3.class;
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_4_ID:
                return Method4.class;
        }

        return super.getClass(classId, genericParameters);
    }

    @Override
    protected com.objectfabric.TObject.UserTObject createInstance(com.objectfabric.Transaction trunk, int classId, com.objectfabric.TType[] genericParameters) {
        switch (classId) {
            case PART02_OBJECTMODEL_GENERATED_BATTERY_CLASS_ID:
                return new part02.objectmodel.generated.Battery(trunk, 0);
            case PART02_OBJECTMODEL_GENERATED_CAR_CLASS_ID:
                return new part02.objectmodel.generated.Car(trunk, null, null, null);
            case PART02_OBJECTMODEL_GENERATED_DOOR_CLASS_ID:
                return new part02.objectmodel.generated.Door(trunk);
            case PART02_OBJECTMODEL_GENERATED_DRIVER_CLASS_ID:
                return new part02.objectmodel.generated.Driver(trunk);
            case PART02_OBJECTMODEL_GENERATED_ELECTRICCAR_CLASS_ID:
                return new part02.objectmodel.generated.ElectricCar(trunk, null, null, null);
            case PART02_OBJECTMODEL_GENERATED_KEY_CLASS_ID:
                return new part02.objectmodel.generated.Key(trunk);
            case PART02_OBJECTMODEL_GENERATED_SUBPACKAGE_OTHERCAR_CLASS_ID:
                return new part02.objectmodel.generated.subPackage.OtherCar(trunk);
            case PART02_OBJECTMODEL_GENERATED_SETTINGS_CLASS_ID:
                return new part02.objectmodel.generated.Settings(trunk);
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_0_ID:
                return new Method0(trunk);
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_1_ID:
                return new Method1(trunk);
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_2_ID:
                return new Method2(trunk);
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_3_ID:
                return new Method3(trunk);
            case PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_4_ID:
                return new Method4(trunk);
        }

        return super.createInstance(trunk, classId, genericParameters);
    }

    protected static final class Version extends com.objectfabric.ObjectModel.Version {

        public Version(com.objectfabric.ObjectModel.Version shared) {
            super(shared);
        }

        @Override
        public byte[] getUID() {
            return MyObjectModel.UID;
        }
    }

    public static class Method0 extends com.objectfabric.TGeneratedFields32 implements com.objectfabric.TObject.UserTObject.Method {

        public static final Method0 INSTANCE = new Method0(com.objectfabric.Site.getLocal().getTrunk());

        public Method0(com.objectfabric.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "start";
        }

        public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_0_ID);

        public static final int ERROR_OBJECTFABRIC_INDEX = 0;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final com.objectfabric.TType ERROR_OBJECTFABRIC_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

        public static final int FIELD_COUNT = 1;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public  com.objectfabric.TType getFieldType(int index) {
            return getFieldTypeStatic(index);
        }

        @SuppressWarnings("static-access")
        public static com.objectfabric.TType getFieldTypeStatic(int index) {
            switch (index) {
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_TYPE;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends com.objectfabric.TGeneratedFields32.Version {

            public java.lang.String _error_objectfabric;

            public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
                Method0.Version source = (Method0.Version) next;
                Method0.Version merged = (Method0.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(com.objectfabric.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(com.objectfabric.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public com.objectfabric.TObject.Version createRead() {
                return null;
            }

            @Override
            public com.objectfabric.TObject.Version createVersion() {
                return new Method0.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_0_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public com.objectfabric.ObjectModel getObjectModel() {
                return part02.objectmodel.generated.MyObjectModel.getInstance();
            }
        }
    }

    public static class Method1 extends com.objectfabric.TGeneratedFields32 implements com.objectfabric.TObject.UserTObject.Method {

        public static final Method1 INSTANCE = new Method1(com.objectfabric.Site.getLocal().getTrunk());

        public Method1(com.objectfabric.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "lend";
        }

        public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_1_ID);

        public static final int FRIEND_INDEX = 0;

        public static final java.lang.String FRIEND_NAME = "friend";

        public static final com.objectfabric.TType FRIEND_TYPE = part02.objectmodel.generated.Driver.TYPE;

        public static final int KEY_INDEX = 1;

        public static final java.lang.String KEY_NAME = "key";

        public static final com.objectfabric.TType KEY_TYPE = part02.objectmodel.generated.Key.TYPE;

        public static final int RETURN_OBJECTFABRIC_INDEX = 2;

        public static final java.lang.String RETURN_OBJECTFABRIC_NAME = "return_objectfabric";

        public static final com.objectfabric.TType RETURN_OBJECTFABRIC_TYPE = part02.objectmodel.generated.Key.TYPE;

        public static final int ERROR_OBJECTFABRIC_INDEX = 3;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final com.objectfabric.TType ERROR_OBJECTFABRIC_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

        public static final int FIELD_COUNT = 4;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case FRIEND_INDEX:
                    return FRIEND_NAME;
                case KEY_INDEX:
                    return KEY_NAME;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_NAME;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public  com.objectfabric.TType getFieldType(int index) {
            return getFieldTypeStatic(index);
        }

        @SuppressWarnings("static-access")
        public static com.objectfabric.TType getFieldTypeStatic(int index) {
            switch (index) {
                case FRIEND_INDEX:
                    return FRIEND_TYPE;
                case KEY_INDEX:
                    return KEY_TYPE;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_TYPE;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_TYPE;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends com.objectfabric.TGeneratedFields32.Version {

            public com.objectfabric.TObject _friend;

            public com.objectfabric.TObject _key;

            public com.objectfabric.TObject _return_objectfabric;

            public java.lang.String _error_objectfabric;

            public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
                Method1.Version source = (Method1.Version) next;
                Method1.Version merged = (Method1.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(FRIEND_INDEX))
                        merged._friend = mergeTObject(merged._friend, source._friend);

                    if (source.getBit(KEY_INDEX))
                        merged._key = mergeTObject(merged._key, source._key);

                    if (source.getBit(RETURN_OBJECTFABRIC_INDEX))
                        merged._return_objectfabric = mergeTObject(merged._return_objectfabric, source._return_objectfabric);

                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(com.objectfabric.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case FRIEND_INDEX: {
                        writer.writeTObject(_friend);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case KEY_INDEX: {
                        writer.writeTObject(_key);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        writer.writeTObject(_return_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(com.objectfabric.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case FRIEND_INDEX: {
                        _friend = reader.readTObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case KEY_INDEX: {
                        _key = reader.readTObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        _return_objectfabric = reader.readTObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public com.objectfabric.TObject.Version createRead() {
                return null;
            }

            @Override
            public com.objectfabric.TObject.Version createVersion() {
                return new Method1.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_1_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public com.objectfabric.ObjectModel getObjectModel() {
                return part02.objectmodel.generated.MyObjectModel.getInstance();
            }
        }
    }

    public static class Method2 extends com.objectfabric.TGeneratedFields32 implements com.objectfabric.TObject.UserTObject.Method {

        public static final Method2 INSTANCE = new Method2(com.objectfabric.Site.getLocal().getTrunk());

        public Method2(com.objectfabric.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "openWindow";
        }

        public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_2_ID);

        public static final int HEIGHT_INDEX = 0;

        public static final java.lang.String HEIGHT_NAME = "height";

        public static final com.objectfabric.TType HEIGHT_TYPE = com.objectfabric.ImmutableClass.INTEGER.getType();

        public static final int ERROR_OBJECTFABRIC_INDEX = 1;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final com.objectfabric.TType ERROR_OBJECTFABRIC_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

        public static final int FIELD_COUNT = 2;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case HEIGHT_INDEX:
                    return HEIGHT_NAME;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public  com.objectfabric.TType getFieldType(int index) {
            return getFieldTypeStatic(index);
        }

        @SuppressWarnings("static-access")
        public static com.objectfabric.TType getFieldTypeStatic(int index) {
            switch (index) {
                case HEIGHT_INDEX:
                    return HEIGHT_TYPE;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_TYPE;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends com.objectfabric.TGeneratedFields32.Version {

            public int _height;

            public java.lang.String _error_objectfabric;

            public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
                Method2.Version source = (Method2.Version) next;
                Method2.Version merged = (Method2.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(HEIGHT_INDEX))
                        merged._height = source._height;

                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(com.objectfabric.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case HEIGHT_INDEX: {
                        if (!writer.canWriteInteger()) {
                            writer.interrupt(null);
                            return;
                        }

                        writer.writeInteger(_height);
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(com.objectfabric.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case HEIGHT_INDEX: {
                        if (!reader.canReadInteger()) {
                            reader.interrupt(null);
                            return;
                        }

                        _height = reader.readInteger();
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public com.objectfabric.TObject.Version createRead() {
                return null;
            }

            @Override
            public com.objectfabric.TObject.Version createVersion() {
                return new Method2.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_2_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public com.objectfabric.ObjectModel getObjectModel() {
                return part02.objectmodel.generated.MyObjectModel.getInstance();
            }
        }
    }

    public static class Method3 extends com.objectfabric.TGeneratedFields32 implements com.objectfabric.TObject.UserTObject.Method {

        public static final Method3 INSTANCE = new Method3(com.objectfabric.Site.getLocal().getTrunk());

        public Method3(com.objectfabric.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "eject";
        }

        public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_3_ID);

        public static final int ERROR_OBJECTFABRIC_INDEX = 0;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final com.objectfabric.TType ERROR_OBJECTFABRIC_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

        public static final int FIELD_COUNT = 1;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public  com.objectfabric.TType getFieldType(int index) {
            return getFieldTypeStatic(index);
        }

        @SuppressWarnings("static-access")
        public static com.objectfabric.TType getFieldTypeStatic(int index) {
            switch (index) {
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_TYPE;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends com.objectfabric.TGeneratedFields32.Version {

            public java.lang.String _error_objectfabric;

            public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
                Method3.Version source = (Method3.Version) next;
                Method3.Version merged = (Method3.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(com.objectfabric.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(com.objectfabric.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public com.objectfabric.TObject.Version createRead() {
                return null;
            }

            @Override
            public com.objectfabric.TObject.Version createVersion() {
                return new Method3.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_3_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public com.objectfabric.ObjectModel getObjectModel() {
                return part02.objectmodel.generated.MyObjectModel.getInstance();
            }
        }
    }

    public static class Method4 extends com.objectfabric.TGeneratedFields32 implements com.objectfabric.TObject.UserTObject.Method {

        public static final Method4 INSTANCE = new Method4(com.objectfabric.Site.getLocal().getTrunk());

        public Method4(com.objectfabric.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "openOtherWindow";
        }

        public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part02.objectmodel.generated.MyObjectModel.getInstance(), part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_4_ID);

        public static final int HEIGHT_INDEX = 0;

        public static final java.lang.String HEIGHT_NAME = "height";

        public static final com.objectfabric.TType HEIGHT_TYPE = com.objectfabric.ImmutableClass.INTEGER.getType();

        public static final int ERROR_OBJECTFABRIC_INDEX = 1;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final com.objectfabric.TType ERROR_OBJECTFABRIC_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

        public static final int FIELD_COUNT = 2;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case HEIGHT_INDEX:
                    return HEIGHT_NAME;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public  com.objectfabric.TType getFieldType(int index) {
            return getFieldTypeStatic(index);
        }

        @SuppressWarnings("static-access")
        public static com.objectfabric.TType getFieldTypeStatic(int index) {
            switch (index) {
                case HEIGHT_INDEX:
                    return HEIGHT_TYPE;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_TYPE;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends com.objectfabric.TGeneratedFields32.Version {

            public int _height;

            public java.lang.String _error_objectfabric;

            public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
                Method4.Version source = (Method4.Version) next;
                Method4.Version merged = (Method4.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(HEIGHT_INDEX))
                        merged._height = source._height;

                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(com.objectfabric.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case HEIGHT_INDEX: {
                        if (!writer.canWriteInteger()) {
                            writer.interrupt(null);
                            return;
                        }

                        writer.writeInteger(_height);
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(com.objectfabric.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case HEIGHT_INDEX: {
                        if (!reader.canReadInteger()) {
                            reader.interrupt(null);
                            return;
                        }

                        _height = reader.readInteger();
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public com.objectfabric.TObject.Version createRead() {
                return null;
            }

            @Override
            public com.objectfabric.TObject.Version createVersion() {
                return new Method4.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return part02.objectmodel.generated.MyObjectModel.PART02_OBJECTMODEL_GENERATED_MYOBJECTMODEL_METHOD_4_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public com.objectfabric.ObjectModel getObjectModel() {
                return part02.objectmodel.generated.MyObjectModel.getInstance();
            }
        }
    }
}

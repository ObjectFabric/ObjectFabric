
package part07.methods.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class MyClass extends com.objectfabric.TGeneratedFields32 {

    public MyClass() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    public MyClass(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected MyClass(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(part07.methods.generated.ObjectModel.getInstance(), part07.methods.generated.ObjectModel.PART07_METHODS_GENERATED_MYCLASS_CLASS_ID);

    public final java.lang.String getText() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TEXT_INDEX);
        java.lang.String value = v != null ? v._text : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setText(java.lang.String value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._text = value;
        v.setBit(TEXT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int TEXT_INDEX = 0;

    public static final java.lang.String TEXT_NAME = "text";

    public static final com.objectfabric.TType TEXT_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

    public static final int FIELD_COUNT = 1;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  com.objectfabric.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static com.objectfabric.TType getFieldTypeStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;

    protected static final int METHOD_1 = 1;

    /**
     * 
     */
    public final int start(java.lang.String text) {
        return start(text, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final int start(java.lang.String text, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            return startImplementation(text);
        else {
            java.util.concurrent.Future<java.lang.Integer> future_ = startAsync(text, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Integer> startAsync(java.lang.String text, com.objectfabric.misc.AsyncCallback<java.lang.Integer> callback) {
        return startAsync(text, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Integer> startAsync(java.lang.String text, com.objectfabric.misc.AsyncCallback<java.lang.Integer> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return startAsync(text, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Integer> startAsync(java.lang.String text, com.objectfabric.misc.AsyncCallback<java.lang.Integer> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            int result_ = 0;
            java.lang.Exception exception_ = null;

            try {
                result_ = startImplementation(text);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            part07.methods.generated.ObjectModel.Method0.Version version_ = (part07.methods.generated.ObjectModel.Method0.Version) createVersion_objectfabric(part07.methods.generated.ObjectModel.Method0.INSTANCE);

            if (text != null) {
                version_._text = text;
                version_.setBit(part07.methods.generated.ObjectModel.Method0.TEXT_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, part07.methods.generated.ObjectModel.Method0.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected int startImplementation(java.lang.String text) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void startImplementationAsync(java.lang.String text, com.objectfabric.MethodCall call) {
        try {
            call.set(startImplementation(text));
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }


    /**
     * 
     */
    public final void stop() {
        stop(getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void stop(java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            stopImplementation();
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = stopAsync(getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> stopAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return stopAsync(callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> stopAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return stopAsync(callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> stopAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Exception exception_ = null;

            try {
                stopImplementation();
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            part07.methods.generated.ObjectModel.Method1.Version version_ = (part07.methods.generated.ObjectModel.Method1.Version) createVersion_objectfabric(part07.methods.generated.ObjectModel.Method1.INSTANCE);

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, part07.methods.generated.ObjectModel.Method1.INSTANCE, version_, METHOD_1, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void stopImplementation() {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void stopImplementationAsync(com.objectfabric.MethodCall call) {
        try {
            stopImplementation();
            call.set(null);
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                part07.methods.generated.ObjectModel.Method0.Version version_ = (part07.methods.generated.ObjectModel.Method0.Version) getMethodVersion_objectfabric(call);
                java.lang.String text = version_ != null ? (java.lang.String) version_._text : null;

                try {
                    startImplementationAsync(text, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            case METHOD_1: {
                try {
                    stopImplementationAsync(call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                ((part07.methods.generated.ObjectModel.Method0.Version) version)._return_objectfabric = (java.lang.Integer) result;
                ((part07.methods.generated.ObjectModel.Method0.Version) version).setBit(part07.methods.generated.ObjectModel.Method0.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_1: {
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((part07.methods.generated.ObjectModel.Method0.Version) version)._error_objectfabric = error;
                ((part07.methods.generated.ObjectModel.Method0.Version) version).setBit(part07.methods.generated.ObjectModel.Method0.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_1: {
                ((part07.methods.generated.ObjectModel.Method1.Version) version)._error_objectfabric = error;
                ((part07.methods.generated.ObjectModel.Method1.Version) version).setBit(part07.methods.generated.ObjectModel.Method1.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                part07.methods.generated.ObjectModel.Method0.Version version = (part07.methods.generated.ObjectModel.Method0.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_1: {
                part07.methods.generated.ObjectModel.Method1.Version version = (part07.methods.generated.ObjectModel.Method1.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _text;

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case TEXT_INDEX:
                    return _text;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case TEXT_INDEX:
                    _text = (java.lang.String) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            MyClass.Version source = (MyClass.Version) next;
            MyClass.Version merged = (MyClass.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(TEXT_INDEX))
                    merged._text = source._text;
            }

            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case TEXT_INDEX: {
                    writer.writeString(_text);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case TEXT_INDEX: {
                    _text = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new MyClass.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return part07.methods.generated.ObjectModel.PART07_METHODS_GENERATED_MYCLASS_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return part07.methods.generated.ObjectModel.getInstance();
        }
    }
}

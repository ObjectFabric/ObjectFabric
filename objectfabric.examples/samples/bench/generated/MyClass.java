
package bench.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class MyClass extends com.objectfabric.TGeneratedFields32 {

    public MyClass() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    public MyClass(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected MyClass(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(bench.generated.BenchObjectModel.getInstance(), bench.generated.BenchObjectModel.BENCH_GENERATED_MYCLASS_CLASS_ID);

    public final int getMyField() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, MY_FIELD_INDEX);
        int value = v != null ? v._MyField : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setMyField(int value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._MyField = value;
        v.setBit(MY_FIELD_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int MY_FIELD_INDEX = 0;

    public static final java.lang.String MY_FIELD_NAME = "MyField";

    public static final com.objectfabric.TType MY_FIELD_TYPE = com.objectfabric.ImmutableClass.INTEGER.getType();

    public static final int FIELD_COUNT = 1;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case MY_FIELD_INDEX:
                return MY_FIELD_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  com.objectfabric.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static com.objectfabric.TType getFieldTypeStatic(int index) {
        switch (index) {
            case MY_FIELD_INDEX:
                return MY_FIELD_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public int _MyField;

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case MY_FIELD_INDEX:
                    return _MyField;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case MY_FIELD_INDEX:
                    _MyField = ((java.lang.Integer) value).intValue();
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            MyClass.Version source = (MyClass.Version) next;
            MyClass.Version merged = (MyClass.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(MY_FIELD_INDEX))
                    merged._MyField = source._MyField;
            }

            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case MY_FIELD_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_MyField);
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case MY_FIELD_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    _MyField = reader.readInteger();
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new MyClass.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return bench.generated.BenchObjectModel.BENCH_GENERATED_MYCLASS_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return bench.generated.BenchObjectModel.getInstance();
        }
    }
}


package part05.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused", "cast", "rawtypes" })
public class Battery extends org.objectfabric.TGenerated {

    public Battery(org.objectfabric.Resource resource, int capacity) {
        this(resource, new Version(FIELD_COUNT), FIELD_COUNT, capacity);
    }

    protected Battery(org.objectfabric.Resource resource, org.objectfabric.TObject.Version shared, int length, int capacity) {
        super(resource, shared, FIELD_COUNT);

        ((Version) shared)._capacity = capacity;

        if (capacity != 0)
            ((Version) shared).setBit(CAPACITY_INDEX);
    }

    public Battery(Battery toCopy) {
        this(toCopy.resource(), toCopy.capacity());

        remaining(toCopy.remaining());
    }

    public static final org.objectfabric.TType TYPE = new org.objectfabric.TType(part05.generated.MyObjectModel.instance(), part05.generated.MyObjectModel.PART05_GENERATED_BATTERY_CLASS_ID);

    public final int capacity() {
        Version v = (Version) shared_();
        return v._capacity;
    }

    public final int remaining() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, REMAINING_INDEX);
        int value = v != null ? v._remaining : 0;
        endRead_(outer, inner);
        return value;
    }

    public final void remaining(int value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._remaining = value;
        v.setBit(REMAINING_INDEX);
        endWrite_(outer, inner);
    }

    public static final int CAPACITY_INDEX = 0;

    public static final java.lang.String CAPACITY_NAME = "capacity";

    public static final org.objectfabric.TType CAPACITY_TYPE = org.objectfabric.Immutable.INTEGER.type();

    public static final int REMAINING_INDEX = 1;

    public static final java.lang.String REMAINING_NAME = "remaining";

    public static final org.objectfabric.TType REMAINING_TYPE = org.objectfabric.Immutable.INTEGER.type();

    public static final int FIELD_COUNT = 2;

    public static java.lang.String fieldName(int index) {
        switch (index) {
            case CAPACITY_INDEX:
                return CAPACITY_NAME;
            case REMAINING_INDEX:
                return REMAINING_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    public static org.objectfabric.TType fieldType(int index) {
        switch (index) {
            case CAPACITY_INDEX:
                return CAPACITY_TYPE;
            case REMAINING_INDEX:
                return REMAINING_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    protected org.objectfabric.TObject.Version createVersion_() {
        Version version = new Version(0);
        version.setObject(this);
        return version;
    }

    @Override
    protected int classId_() {
        return part05.generated.MyObjectModel.PART05_GENERATED_BATTERY_CLASS_ID;
    }

    @Override
    protected org.objectfabric.ObjectModel objectModel_() {
        return part05.generated.MyObjectModel.instance();
    }

    protected static class Version extends org.objectfabric.TIndexed.Version32 {

        public int _capacity;

        public int _remaining;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, CAPACITY_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(int length) {
            super(length);
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return fieldName(index);
        }

        @Override
        public org.objectfabric.TType getFieldType(int index) {
            return fieldType(index);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case CAPACITY_INDEX:
                    return _capacity;
                case REMAINING_INDEX:
                    return _remaining;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case CAPACITY_INDEX:
                    _capacity = ((java.lang.Integer) value).intValue();
                    break;
                case REMAINING_INDEX:
                    _remaining = ((java.lang.Integer) value).intValue();
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public void merge(org.objectfabric.TObject.Version next) {
            Battery.Version source = (Battery.Version) next;

            if (source.hasBits()) {
                if (source.getBit(CAPACITY_INDEX))
                    _capacity = source._capacity;

                if (source.getBit(REMAINING_INDEX))
                    _remaining = source._remaining;
            }

            super.merge(next);
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(org.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case CAPACITY_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_capacity);
                    break;
                }
                case REMAINING_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_remaining);
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }

        @Override
        public void readWrite(org.objectfabric.Reader reader, int index, java.lang.Object[] versions) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case CAPACITY_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    int value = reader.readInteger();

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._capacity = value;

                    break;
                }
                case REMAINING_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    int value = reader.readInteger();

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._remaining = value;

                    break;
                }
                default: {
                    super.readWrite(reader, index, versions);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }
    }
}


package part05.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused", "cast", "rawtypes" })
public class Car extends org.objectfabric.TGenerated {

    public Car(org.objectfabric.Resource resource, java.lang.String brand) {
        this(resource, brand, new org.objectfabric.TMap<part05.generated.User, part05.generated.Settings>(resource), new org.objectfabric.TMap<part05.generated.User, org.objectfabric.TSet<java.lang.String>>(resource));
    }

    public Car(org.objectfabric.Resource resource, java.lang.String brand, org.objectfabric.TMap<part05.generated.User, part05.generated.Settings> settings, org.objectfabric.TMap<part05.generated.User, org.objectfabric.TSet<java.lang.String>> log) {
        this(resource, new Version(FIELD_COUNT), FIELD_COUNT, brand, settings, log);
    }

    protected Car(org.objectfabric.Resource resource, org.objectfabric.TObject.Version shared, int length, java.lang.String brand, org.objectfabric.TMap<part05.generated.User, part05.generated.Settings> settings, org.objectfabric.TMap<part05.generated.User, org.objectfabric.TSet<java.lang.String>> log) {
        super(resource, shared, FIELD_COUNT);

        ((Version) shared)._brand = brand;

        if (brand != null)
            ((Version) shared).setBit(BRAND_INDEX);

        ((Version) shared)._settings = settings;

        if (settings != null)
            ((Version) shared).setBit(SETTINGS_INDEX);

        ((Version) shared)._log = log;

        if (log != null)
            ((Version) shared).setBit(LOG_INDEX);
    }

    public Car(Car toCopy) {
        this(toCopy.resource(), toCopy.brand(), toCopy.settings(), toCopy.log());

        text(toCopy.text());
        field(toCopy.field());
        boxed(toCopy.boxed());
        color(toCopy.color());
        driver(toCopy.driver());
        doors(toCopy.doors());
        child(toCopy.child());
        tag(toCopy.tag());
    }

    public static final org.objectfabric.TType TYPE = new org.objectfabric.TType(part05.generated.MyObjectModel.instance(), part05.generated.MyObjectModel.PART05_GENERATED_CAR_CLASS_ID);

    public final java.lang.String text() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, TEXT_INDEX);
        java.lang.String value = v != null ? v._text : null;
        endRead_(outer, inner);
        return value;
    }

    public final void text(java.lang.String value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._text = value;
        v.setBit(TEXT_INDEX);
        endWrite_(outer, inner);
    }

    public final int field() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, FIELD_INDEX);
        int value = v != null ? v._field : 0;
        endRead_(outer, inner);
        return value;
    }

    public final void field(int value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._field = value;
        v.setBit(FIELD_INDEX);
        endWrite_(outer, inner);
    }

    public final java.lang.Integer boxed() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, BOXED_INDEX);
        java.lang.Integer value = v != null ? v._boxed : null;
        endRead_(outer, inner);
        return value;
    }

    public final void boxed(java.lang.Integer value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._boxed = value;
        v.setBit(BOXED_INDEX);
        endWrite_(outer, inner);
    }

    public final part05.Color color() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, COLOR_INDEX);
        part05.Color value = v != null ? v._color : null;
        endRead_(outer, inner);
        return value;
    }

    public final void color(part05.Color value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._color = value;
        v.setBit(COLOR_INDEX);
        endWrite_(outer, inner);
    }

    public final part05.generated.User driver() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, DRIVER_INDEX);
        part05.generated.User value = v != null ? v._driver : null;
        endRead_(outer, inner);
        return value;
    }

    public final void driver(part05.generated.User value) {
        if (value.resource() != resource())
            wrongResource_();

        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._driver = value;
        v.setBit(DRIVER_INDEX);
        endWrite_(outer, inner);
    }

    public final java.lang.String brand() {
        Version v = (Version) shared_();
        return v._brand;
    }

    public final org.objectfabric.TSet<part05.generated.Door> doors() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, DOORS_INDEX);
        org.objectfabric.TSet<part05.generated.Door> value = v != null ? v._doors : null;
        endRead_(outer, inner);
        return value;
    }

    public final void doors(org.objectfabric.TSet<part05.generated.Door> value) {
        if (value.resource() != resource())
            wrongResource_();

        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._doors = value;
        v.setBit(DOORS_INDEX);
        endWrite_(outer, inner);
    }

    public final org.objectfabric.TMap<part05.generated.User, part05.generated.Settings> settings() {
        Version v = (Version) shared_();
        return v._settings;
    }

    public final org.objectfabric.TMap<part05.generated.User, org.objectfabric.TSet<java.lang.String>> log() {
        Version v = (Version) shared_();
        return v._log;
    }

    public final part05.generated.ElectricCar child() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, CHILD_INDEX);
        part05.generated.ElectricCar value = v != null ? v._child : null;
        endRead_(outer, inner);
        return value;
    }

    public final void child(part05.generated.ElectricCar value) {
        if (value.resource() != resource())
            wrongResource_();

        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._child = value;
        v.setBit(CHILD_INDEX);
        endWrite_(outer, inner);
    }

    /** Value can only be immutable class or TObject. */
    public final java.lang.Object tag() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, TAG_INDEX);
        java.lang.Object value = v != null ? v._tag : null;
        endRead_(outer, inner);
        return value;
    }

    /** Value can only be immutable class or TObject. */
    public final void tag(java.lang.Object value) {
        if (value instanceof org.objectfabric.TObject && ((org.objectfabric.TObject) value).resource() != resource())
            wrongResource_();

        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._tag = value;
        v.setBit(TAG_INDEX);
        endWrite_(outer, inner);
    }

    public static final int TEXT_INDEX = 0;

    public static final java.lang.String TEXT_NAME = "text";

    public static final org.objectfabric.TType TEXT_TYPE = org.objectfabric.Immutable.STRING.type();

    public static final int FIELD_INDEX = 1;

    public static final java.lang.String FIELD_NAME = "field";

    public static final org.objectfabric.TType FIELD_TYPE = org.objectfabric.Immutable.INTEGER.type();

    public static final int BOXED_INDEX = 2;

    public static final java.lang.String BOXED_NAME = "boxed";

    public static final org.objectfabric.TType BOXED_TYPE = org.objectfabric.Immutable.INTEGER_BOXED.type();

    public static final int COLOR_INDEX = 3;

    public static final java.lang.String COLOR_NAME = "color";

    public static final org.objectfabric.TType COLOR_TYPE = new org.objectfabric.TType(part05.Color.class);

    public static final int DRIVER_INDEX = 4;

    public static final java.lang.String DRIVER_NAME = "driver";

    public static final org.objectfabric.TType DRIVER_TYPE = part05.generated.User.TYPE;

    public static final int BRAND_INDEX = 5;

    public static final java.lang.String BRAND_NAME = "brand";

    public static final org.objectfabric.TType BRAND_TYPE = org.objectfabric.Immutable.STRING.type();

    public static final int DOORS_INDEX = 6;

    public static final java.lang.String DOORS_NAME = "doors";

    public static final org.objectfabric.TType DOORS_TYPE = org.objectfabric.TSet.TYPE;

    public static final int SETTINGS_INDEX = 7;

    public static final java.lang.String SETTINGS_NAME = "settings";

    public static final org.objectfabric.TType SETTINGS_TYPE = org.objectfabric.TMap.TYPE;

    public static final int LOG_INDEX = 8;

    public static final java.lang.String LOG_NAME = "log";

    public static final org.objectfabric.TType LOG_TYPE = org.objectfabric.TMap.TYPE;

    public static final int CHILD_INDEX = 9;

    public static final java.lang.String CHILD_NAME = "child";

    public static final org.objectfabric.TType CHILD_TYPE = part05.generated.ElectricCar.TYPE;

    public static final int TAG_INDEX = 10;

    public static final java.lang.String TAG_NAME = "tag";

    public static final org.objectfabric.TType TAG_TYPE = org.objectfabric.TType.OBJECT;

    public static final int FIELD_COUNT = 11;

    public static java.lang.String fieldName(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_NAME;
            case FIELD_INDEX:
                return FIELD_NAME;
            case BOXED_INDEX:
                return BOXED_NAME;
            case COLOR_INDEX:
                return COLOR_NAME;
            case DRIVER_INDEX:
                return DRIVER_NAME;
            case BRAND_INDEX:
                return BRAND_NAME;
            case DOORS_INDEX:
                return DOORS_NAME;
            case SETTINGS_INDEX:
                return SETTINGS_NAME;
            case LOG_INDEX:
                return LOG_NAME;
            case CHILD_INDEX:
                return CHILD_NAME;
            case TAG_INDEX:
                return TAG_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    public static org.objectfabric.TType fieldType(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_TYPE;
            case FIELD_INDEX:
                return FIELD_TYPE;
            case BOXED_INDEX:
                return BOXED_TYPE;
            case COLOR_INDEX:
                return COLOR_TYPE;
            case DRIVER_INDEX:
                return DRIVER_TYPE;
            case BRAND_INDEX:
                return BRAND_TYPE;
            case DOORS_INDEX:
                return DOORS_TYPE;
            case SETTINGS_INDEX:
                return SETTINGS_TYPE;
            case LOG_INDEX:
                return LOG_TYPE;
            case CHILD_INDEX:
                return CHILD_TYPE;
            case TAG_INDEX:
                return TAG_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    protected org.objectfabric.TObject.Version createVersion_() {
        Version version = new Version(0);
        version.setObject(this);
        return version;
    }

    @Override
    protected int classId_() {
        return part05.generated.MyObjectModel.PART05_GENERATED_CAR_CLASS_ID;
    }

    @Override
    protected org.objectfabric.ObjectModel objectModel_() {
        return part05.generated.MyObjectModel.instance();
    }

    protected static class Version extends org.objectfabric.TIndexed.Version32 {

        public java.lang.String _text;

        public int _field;

        public java.lang.Integer _boxed;

        public part05.Color _color;

        public part05.generated.User _driver;

        public java.lang.String _brand;

        public org.objectfabric.TSet _doors;

        public org.objectfabric.TMap _settings;

        public org.objectfabric.TMap _log;

        public part05.generated.ElectricCar _child;

        public java.lang.Object _tag;

        private static final part05.Color[] PART05_COLOR_ENUM_VALUES_ARRAY = part05.Color.values();

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, BRAND_INDEX);
            readOnlys = setBit(readOnlys, SETTINGS_INDEX);
            readOnlys = setBit(readOnlys, LOG_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(int length) {
            super(length);
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return fieldName(index);
        }

        @Override
        public org.objectfabric.TType getFieldType(int index) {
            return fieldType(index);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case TEXT_INDEX:
                    return _text;
                case FIELD_INDEX:
                    return _field;
                case BOXED_INDEX:
                    return _boxed;
                case COLOR_INDEX:
                    return _color;
                case DRIVER_INDEX:
                    return _driver;
                case BRAND_INDEX:
                    return _brand;
                case DOORS_INDEX:
                    return _doors;
                case SETTINGS_INDEX:
                    return _settings;
                case LOG_INDEX:
                    return _log;
                case CHILD_INDEX:
                    return _child;
                case TAG_INDEX:
                    return _tag;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case TEXT_INDEX:
                    _text = (java.lang.String) value;
                    break;
                case FIELD_INDEX:
                    _field = ((java.lang.Integer) value).intValue();
                    break;
                case BOXED_INDEX:
                    _boxed = (java.lang.Integer) value;
                    break;
                case COLOR_INDEX:
                    _color = (part05.Color) value;
                    break;
                case DRIVER_INDEX:
                    _driver = (part05.generated.User) value;
                    break;
                case BRAND_INDEX:
                    _brand = (java.lang.String) value;
                    break;
                case DOORS_INDEX:
                    _doors = (org.objectfabric.TSet) value;
                    break;
                case SETTINGS_INDEX:
                    _settings = (org.objectfabric.TMap) value;
                    break;
                case LOG_INDEX:
                    _log = (org.objectfabric.TMap) value;
                    break;
                case CHILD_INDEX:
                    _child = (part05.generated.ElectricCar) value;
                    break;
                case TAG_INDEX:
                    _tag = value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public void merge(org.objectfabric.TObject.Version next) {
            Car.Version source = (Car.Version) next;

            if (source.hasBits()) {
                if (source.getBit(TEXT_INDEX))
                    _text = source._text;

                if (source.getBit(FIELD_INDEX))
                    _field = source._field;

                if (source.getBit(BOXED_INDEX))
                    _boxed = source._boxed;

                if (source.getBit(COLOR_INDEX))
                    _color = source._color;

                if (source.getBit(DRIVER_INDEX))
                    _driver = source._driver;

                if (source.getBit(BRAND_INDEX))
                    _brand = source._brand;

                if (source.getBit(DOORS_INDEX))
                    _doors = source._doors;

                if (source.getBit(SETTINGS_INDEX))
                    _settings = source._settings;

                if (source.getBit(LOG_INDEX))
                    _log = source._log;

                if (source.getBit(CHILD_INDEX))
                    _child = source._child;

                if (source.getBit(TAG_INDEX))
                    _tag = source._tag;
            }

            super.merge(next);
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(org.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case TEXT_INDEX: {
                    writer.writeString(_text);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case FIELD_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_field);
                    break;
                }
                case BOXED_INDEX: {
                    if (!writer.canWriteIntegerBoxed()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeIntegerBoxed(_boxed);
                    break;
                }
                case COLOR_INDEX: {
                    writer.writeInteger(_color.ordinal());

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case DRIVER_INDEX: {
                    writer.writeTObject(_driver);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case BRAND_INDEX: {
                    writer.writeString(_brand);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case DOORS_INDEX: {
                    writer.writeTObject(_doors);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case SETTINGS_INDEX: {
                    writer.writeTObject(_settings);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case LOG_INDEX: {
                    writer.writeTObject(_log);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case CHILD_INDEX: {
                    writer.writeTObject(_child);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case TAG_INDEX: {
                    writer.writeObject(_tag);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }

        @Override
        public void readWrite(org.objectfabric.Reader reader, int index, java.lang.Object[] versions) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case TEXT_INDEX: {
                    java.lang.String value = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._text = value;

                    break;
                }
                case FIELD_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    int value = reader.readInteger();

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._field = value;

                    break;
                }
                case BOXED_INDEX: {
                    if (!reader.canReadIntegerBoxed()) {
                        reader.interrupt(null);
                        return;
                    }

                    java.lang.Integer value = reader.readIntegerBoxed();

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._boxed = value;

                    break;
                }
                case COLOR_INDEX: {
                    part05.Color value = PART05_COLOR_ENUM_VALUES_ARRAY[reader.readInteger()];

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._color = value;

                    break;
                }
                case DRIVER_INDEX: {
                    java.lang.Object value = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._driver = (part05.generated.User) v;
                    }

                    break;
                }
                case BRAND_INDEX: {
                    java.lang.String value = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._brand = value;

                    break;
                }
                case DOORS_INDEX: {
                    java.lang.Object value = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._doors = (org.objectfabric.TSet) v;
                    }

                    break;
                }
                case SETTINGS_INDEX: {
                    java.lang.Object value = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._settings = (org.objectfabric.TMap) v;
                    }

                    break;
                }
                case LOG_INDEX: {
                    java.lang.Object value = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._log = (org.objectfabric.TMap) v;
                    }

                    break;
                }
                case CHILD_INDEX: {
                    java.lang.Object value = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._child = (part05.generated.ElectricCar) v;
                    }

                    break;
                }
                case TAG_INDEX: {
                    java.lang.Object value = reader.readObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--) {
                        java.lang.Object v = value instanceof org.objectfabric.TObject[] ? ((org.objectfabric.TObject[]) value)[i] : value;
                        ((Version) versions[i])._tag = (java.lang.Object) v;
                    }

                    break;
                }
                default: {
                    super.readWrite(reader, index, versions);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }
    }
}

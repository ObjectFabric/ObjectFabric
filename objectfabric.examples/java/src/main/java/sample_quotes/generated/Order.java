
package sample_quotes.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused", "cast", "rawtypes" })
public class Order extends org.objectfabric.TGenerated {

    public Order(org.objectfabric.Resource resource) {
        this(resource, new Version(FIELD_COUNT), FIELD_COUNT);
    }

    protected Order(org.objectfabric.Resource resource, org.objectfabric.TObject.Version shared, int length) {
        super(resource, shared, FIELD_COUNT);
    }

    public Order(Order toCopy) {
        this(toCopy.resource());

        user(toCopy.user());
        instrument(toCopy.instrument());
        price(toCopy.price());
        quantity(toCopy.quantity());
        type(toCopy.type());
        comment(toCopy.comment());
    }

    public static final org.objectfabric.TType TYPE = new org.objectfabric.TType(sample_quotes.generated.ObjectModel.instance(), sample_quotes.generated.ObjectModel.SAMPLE_QUOTES_GENERATED_ORDER_CLASS_ID);

    public final java.lang.String user() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, USER_INDEX);
        java.lang.String value = v != null ? v._user : null;
        endRead_(outer, inner);
        return value;
    }

    public final void user(java.lang.String value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._user = value;
        v.setBit(USER_INDEX);
        endWrite_(outer, inner);
    }

    public final java.lang.String instrument() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, INSTRUMENT_INDEX);
        java.lang.String value = v != null ? v._instrument : null;
        endRead_(outer, inner);
        return value;
    }

    public final void instrument(java.lang.String value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._instrument = value;
        v.setBit(INSTRUMENT_INDEX);
        endWrite_(outer, inner);
    }

    public final java.math.BigDecimal price() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, PRICE_INDEX);
        java.math.BigDecimal value = v != null ? v._price : null;
        endRead_(outer, inner);
        return value;
    }

    public final void price(java.math.BigDecimal value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._price = value;
        v.setBit(PRICE_INDEX);
        endWrite_(outer, inner);
    }

    public final java.math.BigDecimal quantity() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, QUANTITY_INDEX);
        java.math.BigDecimal value = v != null ? v._quantity : null;
        endRead_(outer, inner);
        return value;
    }

    public final void quantity(java.math.BigDecimal value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._quantity = value;
        v.setBit(QUANTITY_INDEX);
        endWrite_(outer, inner);
    }

    public final int type() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, TYPE_INDEX);
        int value = v != null ? v._type : 0;
        endRead_(outer, inner);
        return value;
    }

    public final void type(int value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._type = value;
        v.setBit(TYPE_INDEX);
        endWrite_(outer, inner);
    }

    public final java.lang.String comment() {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startRead_(outer);
        Version v = (Version) getVersion32_(inner, COMMENT_INDEX);
        java.lang.String value = v != null ? v._comment : null;
        endRead_(outer, inner);
        return value;
    }

    public final void comment(java.lang.String value) {
        org.objectfabric.TObject.Transaction outer = current_();
        org.objectfabric.TObject.Transaction inner = startWrite_(outer);
        Version v = (Version) getOrCreateVersion_(inner);
        v._comment = value;
        v.setBit(COMMENT_INDEX);
        endWrite_(outer, inner);
    }

    public static final int USER_INDEX = 0;

    public static final java.lang.String USER_NAME = "user";

    public static final org.objectfabric.TType USER_TYPE = org.objectfabric.Immutable.STRING.type();

    public static final int INSTRUMENT_INDEX = 1;

    public static final java.lang.String INSTRUMENT_NAME = "instrument";

    public static final org.objectfabric.TType INSTRUMENT_TYPE = org.objectfabric.Immutable.STRING.type();

    public static final int PRICE_INDEX = 2;

    public static final java.lang.String PRICE_NAME = "price";

    public static final org.objectfabric.TType PRICE_TYPE = org.objectfabric.Immutable.DECIMAL.type();

    public static final int QUANTITY_INDEX = 3;

    public static final java.lang.String QUANTITY_NAME = "quantity";

    public static final org.objectfabric.TType QUANTITY_TYPE = org.objectfabric.Immutable.DECIMAL.type();

    public static final int TYPE_INDEX = 4;

    public static final java.lang.String TYPE_NAME = "type";

    public static final org.objectfabric.TType TYPE_TYPE = org.objectfabric.Immutable.INTEGER.type();

    public static final int COMMENT_INDEX = 5;

    public static final java.lang.String COMMENT_NAME = "comment";

    public static final org.objectfabric.TType COMMENT_TYPE = org.objectfabric.Immutable.STRING.type();

    public static final int FIELD_COUNT = 6;

    public static java.lang.String fieldName(int index) {
        switch (index) {
            case USER_INDEX:
                return USER_NAME;
            case INSTRUMENT_INDEX:
                return INSTRUMENT_NAME;
            case PRICE_INDEX:
                return PRICE_NAME;
            case QUANTITY_INDEX:
                return QUANTITY_NAME;
            case TYPE_INDEX:
                return TYPE_NAME;
            case COMMENT_INDEX:
                return COMMENT_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    public static org.objectfabric.TType fieldType(int index) {
        switch (index) {
            case USER_INDEX:
                return USER_TYPE;
            case INSTRUMENT_INDEX:
                return INSTRUMENT_TYPE;
            case PRICE_INDEX:
                return PRICE_TYPE;
            case QUANTITY_INDEX:
                return QUANTITY_TYPE;
            case TYPE_INDEX:
                return TYPE_TYPE;
            case COMMENT_INDEX:
                return COMMENT_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    protected org.objectfabric.TObject.Version createVersion_() {
        Version version = new Version(0);
        version.setObject(this);
        return version;
    }

    @Override
    protected int classId_() {
        return sample_quotes.generated.ObjectModel.SAMPLE_QUOTES_GENERATED_ORDER_CLASS_ID;
    }

    @Override
    protected org.objectfabric.ObjectModel objectModel_() {
        return sample_quotes.generated.ObjectModel.instance();
    }

    protected static class Version extends org.objectfabric.TIndexed.Version32 {

        public java.lang.String _user;

        public java.lang.String _instrument;

        public java.math.BigDecimal _price;

        public java.math.BigDecimal _quantity;

        public int _type;

        public java.lang.String _comment;

        static {
        }

        public Version(int length) {
            super(length);
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return fieldName(index);
        }

        @Override
        public org.objectfabric.TType getFieldType(int index) {
            return fieldType(index);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case USER_INDEX:
                    return _user;
                case INSTRUMENT_INDEX:
                    return _instrument;
                case PRICE_INDEX:
                    return _price;
                case QUANTITY_INDEX:
                    return _quantity;
                case TYPE_INDEX:
                    return _type;
                case COMMENT_INDEX:
                    return _comment;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case USER_INDEX:
                    _user = (java.lang.String) value;
                    break;
                case INSTRUMENT_INDEX:
                    _instrument = (java.lang.String) value;
                    break;
                case PRICE_INDEX:
                    _price = (java.math.BigDecimal) value;
                    break;
                case QUANTITY_INDEX:
                    _quantity = (java.math.BigDecimal) value;
                    break;
                case TYPE_INDEX:
                    _type = ((java.lang.Integer) value).intValue();
                    break;
                case COMMENT_INDEX:
                    _comment = (java.lang.String) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public void merge(org.objectfabric.TObject.Version next) {
            Order.Version source = (Order.Version) next;

            if (source.hasBits()) {
                if (source.getBit(USER_INDEX))
                    _user = source._user;

                if (source.getBit(INSTRUMENT_INDEX))
                    _instrument = source._instrument;

                if (source.getBit(PRICE_INDEX))
                    _price = source._price;

                if (source.getBit(QUANTITY_INDEX))
                    _quantity = source._quantity;

                if (source.getBit(TYPE_INDEX))
                    _type = source._type;

                if (source.getBit(COMMENT_INDEX))
                    _comment = source._comment;
            }

            super.merge(next);
        }

        @Override
        public void writeWrite(org.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case USER_INDEX: {
                    writer.writeString(_user);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case INSTRUMENT_INDEX: {
                    writer.writeString(_instrument);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case PRICE_INDEX: {
                    writer.writeDecimal(_price);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case QUANTITY_INDEX: {
                    writer.writeDecimal(_quantity);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                case TYPE_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_type);
                    break;
                }
                case COMMENT_INDEX: {
                    writer.writeString(_comment);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }

        @Override
        public void readWrite(org.objectfabric.Reader reader, int index, java.lang.Object[] versions) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case USER_INDEX: {
                    java.lang.String value = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._user = value;

                    break;
                }
                case INSTRUMENT_INDEX: {
                    java.lang.String value = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._instrument = value;

                    break;
                }
                case PRICE_INDEX: {
                    java.math.BigDecimal value = reader.readDecimal();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._price = value;

                    break;
                }
                case QUANTITY_INDEX: {
                    java.math.BigDecimal value = reader.readDecimal();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._quantity = value;

                    break;
                }
                case TYPE_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    int value = reader.readInteger();

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._type = value;

                    break;
                }
                case COMMENT_INDEX: {
                    java.lang.String value = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    for (int i = versions.length - 1; i >= 0; i--)
                        ((Version) versions[i])._comment = value;

                    break;
                }
                default: {
                    super.readWrite(reader, index, versions);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    break;
                }
            }
        }
    }
}

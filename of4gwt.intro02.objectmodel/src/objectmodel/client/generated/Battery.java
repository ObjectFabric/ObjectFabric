
package objectmodel.client.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class Battery extends of4gwt.TGeneratedFields32 {

    public Battery(int capacity) {
        this(of4gwt.Transaction.getDefaultTrunk(), capacity);
    }

    public Battery(of4gwt.Transaction trunk, int capacity) {
        this(new Version(null, FIELD_COUNT), trunk, capacity);
    }

    protected Battery(of4gwt.TObject.Version shared, of4gwt.Transaction trunk, int capacity) {
        super(shared, trunk);

        ((Version) shared)._capacity = capacity;

        if (capacity != 0)
            ((Version) shared).setBit(CAPACITY_INDEX);
    }

    public static final of4gwt.TType TYPE = new of4gwt.TType(objectmodel.client.generated.MyObjectModel.getInstance(), objectmodel.client.generated.MyObjectModel.OBJECTMODEL_CLIENT_GENERATED_BATTERY_CLASS_ID);

    public final int getCapacity() {
        Version v = (Version) getSharedVersion_objectfabric();
        return v._capacity;
    }

    public final int getRemaining() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, REMAINING_INDEX);
        int value = v != null ? v._remaining : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setRemaining(int value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._remaining = value;
        v.setBit(REMAINING_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int CAPACITY_INDEX = 0;

    public static final java.lang.String CAPACITY_NAME = "capacity";

    public static final of4gwt.TType CAPACITY_TYPE = of4gwt.ImmutableClass.INTEGER.getType();

    public static final int REMAINING_INDEX = 1;

    public static final java.lang.String REMAINING_NAME = "remaining";

    public static final of4gwt.TType REMAINING_TYPE = of4gwt.ImmutableClass.INTEGER.getType();

    public static final int FIELD_COUNT = 2;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case CAPACITY_INDEX:
                return CAPACITY_NAME;
            case REMAINING_INDEX:
                return REMAINING_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  of4gwt.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static of4gwt.TType getFieldTypeStatic(int index) {
        switch (index) {
            case CAPACITY_INDEX:
                return CAPACITY_TYPE;
            case REMAINING_INDEX:
                return REMAINING_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;
    /**
     * Watch your feet.
     * <nl>
     * Asynchronous version.
     */
    public final of4gwt.misc.Future<java.lang.Void> ejectAsync(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> callback) {
        return ejectAsync(callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Watch your feet.
     * <nl>
     * Asynchronous version, with options for the callback.
     */
    public final of4gwt.misc.Future<java.lang.Void> ejectAsync(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> callback, of4gwt.AsyncOptions asyncOptions) {
        return ejectAsync(callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Watch your feet.
     * <nl>
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final of4gwt.misc.Future<java.lang.Void> ejectAsync(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> callback, of4gwt.AsyncOptions asyncOptions, of4gwt.misc.Executor executor) {
        if (executor == of4gwt.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Exception exception_ = null;

            try {
                ejectImplementation();
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            objectmodel.client.generated.MyObjectModel.Method3.Version version_ = (objectmodel.client.generated.MyObjectModel.Method3.Version) createVersion_objectfabric(objectmodel.client.generated.MyObjectModel.Method3.INSTANCE);

            of4gwt.TObject.UserTObject.LocalMethodCall call_ = new of4gwt.TObject.UserTObject.LocalMethodCall(this, objectmodel.client.generated.MyObjectModel.Method3.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void ejectImplementation() {
        throw new RuntimeException(of4gwt.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void ejectImplementationAsync(of4gwt.MethodCall call) {
        try {
            ejectImplementation();
            call.set(null);
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                try {
                    ejectImplementationAsync(call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(of4gwt.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(of4gwt.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((objectmodel.client.generated.MyObjectModel.Method3.Version) version)._error_objectfabric = error;
                ((objectmodel.client.generated.MyObjectModel.Method3.Version) version).setBit(objectmodel.client.generated.MyObjectModel.Method3.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                objectmodel.client.generated.MyObjectModel.Method3.Version version = (objectmodel.client.generated.MyObjectModel.Method3.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new of4gwt.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends of4gwt.TGeneratedFields32.Version {

        public int _capacity;

        public int _remaining;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, CAPACITY_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(of4gwt.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case CAPACITY_INDEX:
                    return _capacity;
                case REMAINING_INDEX:
                    return _remaining;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case CAPACITY_INDEX:
                    _capacity = ((java.lang.Integer) value).intValue();
                    break;
                case REMAINING_INDEX:
                    _remaining = ((java.lang.Integer) value).intValue();
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public of4gwt.TObject.Version merge(of4gwt.TObject.Version target, of4gwt.TObject.Version next, int flags) {
            Battery.Version source = (Battery.Version) next;
            Battery.Version merged = (Battery.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(CAPACITY_INDEX))
                    merged._capacity = source._capacity;

                if (source.getBit(REMAINING_INDEX))
                    merged._remaining = source._remaining;
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(of4gwt.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case CAPACITY_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_capacity);
                    break;
                }
                case REMAINING_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_remaining);
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(of4gwt.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case CAPACITY_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    Battery.Version shared = (Battery.Version) getUnion();
                    shared._capacity = reader.readInteger();

                    shared.setBit(CAPACITY_INDEX);
                    unsetBit(CAPACITY_INDEX);
                    break;
                }
                case REMAINING_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    _remaining = reader.readInteger();
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public of4gwt.TObject.Version createVersion() {
            return new Battery.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return objectmodel.client.generated.MyObjectModel.OBJECTMODEL_CLIENT_GENERATED_BATTERY_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public of4gwt.ObjectModel getObjectModel() {
            return objectmodel.client.generated.MyObjectModel.getInstance();
        }
    }
}


package finance.client.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class Market extends of4gwt.TGeneratedFields32 {

    public Market() {
        this(of4gwt.Transaction.getDefaultTrunk());
    }

    public Market(of4gwt.Transaction trunk) {
        this(trunk, new of4gwt.TSet<finance.client.generated.User>(trunk));
    }

    public Market(of4gwt.TSet<finance.client.generated.User> Users) {
        this(of4gwt.Transaction.getDefaultTrunk(), Users);
    }

    public Market(of4gwt.Transaction trunk, of4gwt.TSet<finance.client.generated.User> Users) {
        this(new Version(null, FIELD_COUNT), trunk, Users);
    }

    protected Market(of4gwt.TObject.Version shared, of4gwt.Transaction trunk, of4gwt.TSet<finance.client.generated.User> Users) {
        super(shared, trunk);

        ((Version) shared)._Users = shared.mergeTObject(((Version) shared)._Users, Users);

        if (Users != null)
            ((Version) shared).setBit(USERS_INDEX);
    }

    public static final of4gwt.TType TYPE = new of4gwt.TType(finance.client.generated.ObjectModel.getInstance(), finance.client.generated.ObjectModel.FINANCE_CLIENT_GENERATED_MARKET_CLASS_ID);

    public final of4gwt.TSet<finance.client.generated.User> getUsers() {
        Version v = (Version) getSharedVersion_objectfabric();
        return (of4gwt.TSet<finance.client.generated.User>) getUserTObject_objectfabric(v._Users);
    }

    public static final int USERS_INDEX = 0;

    public static final java.lang.String USERS_NAME = "Users";

    public static final of4gwt.TType USERS_TYPE = of4gwt.TSet.TYPE;

    public static final int FIELD_COUNT = 1;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case USERS_INDEX:
                return USERS_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  of4gwt.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static of4gwt.TType getFieldTypeStatic(int index) {
        switch (index) {
            case USERS_INDEX:
                return USERS_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;
    /**
     * Asynchronous version.
     */
    public final of4gwt.misc.Future<of4gwt.TList<finance.client.generated.Instrument>> getInstrumentsAsync(java.lang.String query, com.google.gwt.user.client.rpc.AsyncCallback<of4gwt.TList<finance.client.generated.Instrument>> callback) {
        return getInstrumentsAsync(query, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final of4gwt.misc.Future<of4gwt.TList<finance.client.generated.Instrument>> getInstrumentsAsync(java.lang.String query, com.google.gwt.user.client.rpc.AsyncCallback<of4gwt.TList<finance.client.generated.Instrument>> callback, of4gwt.AsyncOptions asyncOptions) {
        return getInstrumentsAsync(query, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final of4gwt.misc.Future<of4gwt.TList<finance.client.generated.Instrument>> getInstrumentsAsync(java.lang.String query, com.google.gwt.user.client.rpc.AsyncCallback<of4gwt.TList<finance.client.generated.Instrument>> callback, of4gwt.AsyncOptions asyncOptions, of4gwt.misc.Executor executor) {
        if (executor == of4gwt.misc.TransparentExecutor.getInstance()) {
            of4gwt.TList<finance.client.generated.Instrument> result_ = null;
            java.lang.Exception exception_ = null;

            try {
                result_ = getInstrumentsImplementation(query);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            finance.client.generated.ObjectModel.Method0.Version version_ = (finance.client.generated.ObjectModel.Method0.Version) createVersion_objectfabric(finance.client.generated.ObjectModel.Method0.INSTANCE);

            if (query != null) {
                version_._query = query;
                version_.setBit(finance.client.generated.ObjectModel.Method0.QUERY_INDEX);
            }

            of4gwt.TObject.UserTObject.LocalMethodCall call_ = new of4gwt.TObject.UserTObject.LocalMethodCall(this, finance.client.generated.ObjectModel.Method0.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected of4gwt.TList<finance.client.generated.Instrument> getInstrumentsImplementation(java.lang.String query) {
        throw new RuntimeException(of4gwt.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void getInstrumentsImplementationAsync(java.lang.String query, of4gwt.MethodCall call) {
        try {
            call.set(getInstrumentsImplementation(query));
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                finance.client.generated.ObjectModel.Method0.Version version_ = (finance.client.generated.ObjectModel.Method0.Version) getMethodVersion_objectfabric(call);
                java.lang.String query = version_ != null ? (java.lang.String) version_._query : null;

                try {
                    getInstrumentsImplementationAsync(query, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(of4gwt.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                ((finance.client.generated.ObjectModel.Method0.Version) version)._return_objectfabric = (of4gwt.TList<finance.client.generated.Instrument>) result;
                ((finance.client.generated.ObjectModel.Method0.Version) version).setBit(finance.client.generated.ObjectModel.Method0.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(of4gwt.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((finance.client.generated.ObjectModel.Method0.Version) version)._error_objectfabric = error;
                ((finance.client.generated.ObjectModel.Method0.Version) version).setBit(finance.client.generated.ObjectModel.Method0.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                finance.client.generated.ObjectModel.Method0.Version version = (finance.client.generated.ObjectModel.Method0.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new of4gwt.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends of4gwt.TGeneratedFields32.Version {

        public of4gwt.TObject _Users;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, USERS_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(of4gwt.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case USERS_INDEX:
                    return getUserTObject_objectfabric(_Users);
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case USERS_INDEX:
                    _Users = (of4gwt.TSet) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public of4gwt.TObject.Version merge(of4gwt.TObject.Version target, of4gwt.TObject.Version next, int flags) {
            Market.Version source = (Market.Version) next;
            Market.Version merged = (Market.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(USERS_INDEX))
                    merged._Users = mergeTObject(merged._Users, source._Users);
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(of4gwt.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case USERS_INDEX: {
                    writer.writeTObject(_Users);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(of4gwt.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case USERS_INDEX: {
                    Market.Version shared = (Market.Version) getUnion();
                    shared._Users = getSharedVersion_objectfabric(reader.readTObject());

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(USERS_INDEX);
                    unsetBit(USERS_INDEX);
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public of4gwt.TObject.Version createVersion() {
            return new Market.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return finance.client.generated.ObjectModel.FINANCE_CLIENT_GENERATED_MARKET_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public of4gwt.ObjectModel getObjectModel() {
            return finance.client.generated.ObjectModel.getInstance();
        }
    }
}

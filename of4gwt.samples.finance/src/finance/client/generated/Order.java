
package finance.client.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class Order extends of4gwt.TGeneratedFields32 {

    public Order() {
        this(of4gwt.Transaction.getDefaultTrunk());
    }

    public Order(of4gwt.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected Order(of4gwt.TObject.Version shared, of4gwt.Transaction trunk) {
        super(shared, trunk);
    }

    public static final of4gwt.TType TYPE = new of4gwt.TType(finance.client.generated.ObjectModel.getInstance(), finance.client.generated.ObjectModel.FINANCE_CLIENT_GENERATED_ORDER_CLASS_ID);

    public final finance.client.generated.Instrument getInstrument() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, INSTRUMENT_INDEX);
        finance.client.generated.Instrument value = v != null ? (finance.client.generated.Instrument) getUserTObject_objectfabric(v._instrument) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setInstrument(finance.client.generated.Instrument value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._instrument = value;
        v.setBit(INSTRUMENT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.math.BigDecimal getPrice() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, PRICE_INDEX);
        java.math.BigDecimal value = v != null ? v._price : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setPrice(java.math.BigDecimal value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._price = value;
        v.setBit(PRICE_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.math.BigDecimal getQuantity() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, QUANTITY_INDEX);
        java.math.BigDecimal value = v != null ? v._quantity : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setQuantity(java.math.BigDecimal value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._quantity = value;
        v.setBit(QUANTITY_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final int getType() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TYPE_INDEX);
        int value = v != null ? v._type : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setType(int value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._type = value;
        v.setBit(TYPE_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.String getComment() {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, COMMENT_INDEX);
        java.lang.String value = v != null ? v._comment : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setComment(java.lang.String value) {
        of4gwt.Transaction outer = of4gwt.Transaction.getCurrent();
        of4gwt.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._comment = value;
        v.setBit(COMMENT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int INSTRUMENT_INDEX = 0;

    public static final java.lang.String INSTRUMENT_NAME = "instrument";

    public static final of4gwt.TType INSTRUMENT_TYPE = finance.client.generated.Instrument.TYPE;

    public static final int PRICE_INDEX = 1;

    public static final java.lang.String PRICE_NAME = "price";

    public static final of4gwt.TType PRICE_TYPE = of4gwt.ImmutableClass.DECIMAL.getType();

    public static final int QUANTITY_INDEX = 2;

    public static final java.lang.String QUANTITY_NAME = "quantity";

    public static final of4gwt.TType QUANTITY_TYPE = of4gwt.ImmutableClass.DECIMAL.getType();

    public static final int TYPE_INDEX = 3;

    public static final java.lang.String TYPE_NAME = "type";

    public static final of4gwt.TType TYPE_TYPE = of4gwt.ImmutableClass.INTEGER.getType();

    public static final int COMMENT_INDEX = 4;

    public static final java.lang.String COMMENT_NAME = "comment";

    public static final of4gwt.TType COMMENT_TYPE = of4gwt.ImmutableClass.STRING.getType();

    public static final int FIELD_COUNT = 5;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case INSTRUMENT_INDEX:
                return INSTRUMENT_NAME;
            case PRICE_INDEX:
                return PRICE_NAME;
            case QUANTITY_INDEX:
                return QUANTITY_NAME;
            case TYPE_INDEX:
                return TYPE_NAME;
            case COMMENT_INDEX:
                return COMMENT_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  of4gwt.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static of4gwt.TType getFieldTypeStatic(int index) {
        switch (index) {
            case INSTRUMENT_INDEX:
                return INSTRUMENT_TYPE;
            case PRICE_INDEX:
                return PRICE_TYPE;
            case QUANTITY_INDEX:
                return QUANTITY_TYPE;
            case TYPE_INDEX:
                return TYPE_TYPE;
            case COMMENT_INDEX:
                return COMMENT_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends of4gwt.TGeneratedFields32.Version {

        public of4gwt.TObject _instrument;

        public java.math.BigDecimal _price;

        public java.math.BigDecimal _quantity;

        public int _type;

        public java.lang.String _comment;

        static {
        }

        public Version(of4gwt.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case INSTRUMENT_INDEX:
                    return getUserTObject_objectfabric(_instrument);
                case PRICE_INDEX:
                    return _price;
                case QUANTITY_INDEX:
                    return _quantity;
                case TYPE_INDEX:
                    return _type;
                case COMMENT_INDEX:
                    return _comment;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case INSTRUMENT_INDEX:
                    _instrument = (finance.client.generated.Instrument) value;
                    break;
                case PRICE_INDEX:
                    _price = (java.math.BigDecimal) value;
                    break;
                case QUANTITY_INDEX:
                    _quantity = (java.math.BigDecimal) value;
                    break;
                case TYPE_INDEX:
                    _type = ((java.lang.Integer) value).intValue();
                    break;
                case COMMENT_INDEX:
                    _comment = (java.lang.String) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public of4gwt.TObject.Version merge(of4gwt.TObject.Version target, of4gwt.TObject.Version next, int flags) {
            Order.Version source = (Order.Version) next;
            Order.Version merged = (Order.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(INSTRUMENT_INDEX))
                    merged._instrument = mergeTObject(merged._instrument, source._instrument);

                if (source.getBit(PRICE_INDEX))
                    merged._price = source._price;

                if (source.getBit(QUANTITY_INDEX))
                    merged._quantity = source._quantity;

                if (source.getBit(TYPE_INDEX))
                    merged._type = source._type;

                if (source.getBit(COMMENT_INDEX))
                    merged._comment = source._comment;
            }

            return merged;
        }

        @Override
        public void writeWrite(of4gwt.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case INSTRUMENT_INDEX: {
                    writer.writeTObject(_instrument);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case PRICE_INDEX: {
                    writer.writeDecimal(_price);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case QUANTITY_INDEX: {
                    writer.writeDecimal(_quantity);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case TYPE_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_type);
                    break;
                }
                case COMMENT_INDEX: {
                    writer.writeString(_comment);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(of4gwt.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case INSTRUMENT_INDEX: {
                    _instrument = reader.readTObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case PRICE_INDEX: {
                    _price = reader.readDecimal();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case QUANTITY_INDEX: {
                    _quantity = reader.readDecimal();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case TYPE_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    _type = reader.readInteger();
                    break;
                }
                case COMMENT_INDEX: {
                    _comment = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public of4gwt.TObject.Version createVersion() {
            return new Order.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return finance.client.generated.ObjectModel.FINANCE_CLIENT_GENERATED_ORDER_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public of4gwt.ObjectModel getObjectModel() {
            return finance.client.generated.ObjectModel.getInstance();
        }
    }
}

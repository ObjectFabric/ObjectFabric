
package com.objectfabric.security.shiro;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public class Role extends com.objectfabric.TGeneratedFields32 {

    public Role(java.lang.String name) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), name);
    }

    public Role(com.objectfabric.Transaction trunk, java.lang.String name) {
        this(trunk, name, new com.objectfabric.TSet<java.lang.String>(trunk));
    }

    public Role(java.lang.String name, com.objectfabric.TSet<java.lang.String> permissions) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), name, permissions);
    }

    public Role(com.objectfabric.Transaction trunk, java.lang.String name, com.objectfabric.TSet<java.lang.String> permissions) {
        this(new Version(null, FIELD_COUNT), trunk, name, permissions);
    }

    protected Role(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk, java.lang.String name, com.objectfabric.TSet<java.lang.String> permissions) {
        super(shared, trunk);

        ((Version) shared)._name = name;

        if (name != null)
            ((Version) shared).setBit(NAME_INDEX);

        ((Version) shared)._permissions = shared.mergeTObject(((Version) shared)._permissions, permissions);

        if (permissions != null)
            ((Version) shared).setBit(PERMISSIONS_INDEX);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(com.objectfabric.security.shiro.ShiroObjectModel.getInstance(), com.objectfabric.security.shiro.ShiroObjectModel.COM_OBJECTFABRIC_SECURITY_SHIRO_ROLE_CLASS_ID);

    public final java.lang.String getName() {
        Version v = (Version) getSharedVersion_objectfabric();
        return v._name;
    }

    public final com.objectfabric.TSet<java.lang.String> getPermissions() {
        Version v = (Version) getSharedVersion_objectfabric();
        return (com.objectfabric.TSet<java.lang.String>) getUserTObject_objectfabric(v._permissions);
    }

    public static final int NAME_INDEX = 0;

    public static final java.lang.String NAME_NAME = "name";

    public static final java.lang.Class NAME_CLASS = java.lang.String.class;

    public static final int PERMISSIONS_INDEX = 1;

    public static final java.lang.String PERMISSIONS_NAME = "permissions";

    public static final java.lang.Class PERMISSIONS_CLASS = com.objectfabric.TSet.class;

    public static final int FIELD_COUNT = 2;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case NAME_INDEX:
                return NAME_NAME;
            case PERMISSIONS_INDEX:
                return PERMISSIONS_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            case NAME_INDEX:
                return NAME_CLASS;
            case PERMISSIONS_INDEX:
                return PERMISSIONS_CLASS;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _name;

        public com.objectfabric.TObject _permissions;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, NAME_INDEX);
            readOnlys = setBit(readOnlys, PERMISSIONS_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case NAME_INDEX:
                    return _name;
                case PERMISSIONS_INDEX:
                    return getUserTObject_objectfabric(_permissions);
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case NAME_INDEX:
                    _name = (java.lang.String) value;
                    break;
                case PERMISSIONS_INDEX:
                    _permissions = (com.objectfabric.TSet) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            Role.Version source = (Role.Version) next;
            Role.Version merged = (Role.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(NAME_INDEX))
                    merged._name = source._name;

                if (source.getBit(PERMISSIONS_INDEX))
                    merged._permissions = mergeTObject(merged._permissions, source._permissions);
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case NAME_INDEX: {
                    writer.writeString(_name);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case PERMISSIONS_INDEX: {
                    writer.writeTObject(_permissions);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case NAME_INDEX: {
                    Role.Version shared = (Role.Version) getUnion();
                    shared._name = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(NAME_INDEX);
                    unsetBit(NAME_INDEX);
                    break;
                }
                case PERMISSIONS_INDEX: {
                    Role.Version shared = (Role.Version) getUnion();
                    shared._permissions = getSharedVersion_objectfabric(reader.readTObject());

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(PERMISSIONS_INDEX);
                    unsetBit(PERMISSIONS_INDEX);
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new Role.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return com.objectfabric.security.shiro.ShiroObjectModel.COM_OBJECTFABRIC_SECURITY_SHIRO_ROLE_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return com.objectfabric.security.shiro.ShiroObjectModel.getInstance();
        }
    }
}

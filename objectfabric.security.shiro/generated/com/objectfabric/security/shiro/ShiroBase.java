
package com.objectfabric.security.shiro;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
public abstract class ShiroBase extends com.objectfabric.TGeneratedFields32 {

    protected ShiroBase(com.objectfabric.security.shiro.ShiroStore store) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), store);
    }

    protected ShiroBase(com.objectfabric.Transaction trunk, com.objectfabric.security.shiro.ShiroStore store) {
        this(new Version(null, FIELD_COUNT), trunk, store);
    }

    protected ShiroBase(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk, com.objectfabric.security.shiro.ShiroStore store) {
        super(shared, trunk);

        ((Version) shared)._store = shared.mergeTObject(((Version) shared)._store, store);

        if (store != null)
            ((Version) shared).setBit(STORE_INDEX);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(com.objectfabric.security.shiro.ShiroObjectModel.getInstance(), com.objectfabric.security.shiro.ShiroObjectModel.COM_OBJECTFABRIC_SECURITY_SHIRO_SHIRO_CLASS_ID);

    public final com.objectfabric.security.shiro.ShiroStore getStore() {
        Version v = (Version) getSharedVersion_objectfabric();
        return (com.objectfabric.security.shiro.ShiroStore) getUserTObject_objectfabric(v._store);
    }

    public static final int STORE_INDEX = 0;

    public static final java.lang.String STORE_NAME = "store";

    public static final java.lang.Class STORE_CLASS = com.objectfabric.security.shiro.ShiroStore.class;

    public static final int FIELD_COUNT = 1;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case STORE_INDEX:
                return STORE_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            case STORE_INDEX:
                return STORE_CLASS;
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;

    protected static final int METHOD_1 = 1;

    protected static final int METHOD_2 = 2;

    protected static final int METHOD_3 = 3;

    protected static final int METHOD_4 = 4;

    /**
     * Creates a session
     * <nl>
     * 
     */
    public final java.lang.String login(java.lang.String username, java.lang.String password) {
        return login(username, password, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Creates a session
     * <nl>
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final java.lang.String login(java.lang.String username, java.lang.String password, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            return loginImplementation(username, password);
        else {
            java.util.concurrent.Future<java.lang.String> future_ = loginAsync(username, password, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Creates a session
     * <nl>
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.String> loginAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<java.lang.String> callback) {
        return loginAsync(username, password, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Creates a session
     * <nl>
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.String> loginAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<java.lang.String> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return loginAsync(username, password, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Creates a session
     * <nl>
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.String> loginAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<java.lang.String> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.String result_ = null;
            java.lang.Throwable throwable_ = null;

            try {
                result_ = loginImplementation(username, password);
            } catch (java.lang.Throwable t_) {
                throwable_ = t_;
            }

            return getCompletedFuture_objectfabric(result_, throwable_, callback, asyncOptions);
        } else {
            com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) createVersion_objectfabric(com.objectfabric.security.shiro.ShiroObjectModel.Method0.INSTANCE);

            if (username != null) {
                version_._username = username;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method0.USERNAME_INDEX);
            }

            if (password != null) {
                version_._password = password;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method0.PASSWORD_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.security.shiro.ShiroObjectModel.Method0.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected java.lang.String loginImplementation(java.lang.String username, java.lang.String password) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void loginImplementationAsync(java.lang.String username, java.lang.String password, com.objectfabric.MethodCall call) {
        try {
            call.set(loginImplementation(username, password));
        } catch (java.lang.Throwable t_) {
            call.setException(t_);
        }
    }


    /**
     * Binds to existing session
     * <nl>
     * 
     */
    public final void bind(java.lang.String session) {
        bind(session, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Binds to existing session
     * <nl>
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void bind(java.lang.String session, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            bindImplementation(session);
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = bindAsync(session, getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Binds to existing session
     * <nl>
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> bindAsync(java.lang.String session, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return bindAsync(session, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Binds to existing session
     * <nl>
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> bindAsync(java.lang.String session, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return bindAsync(session, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Binds to existing session
     * <nl>
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> bindAsync(java.lang.String session, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Throwable throwable_ = null;

            try {
                bindImplementation(session);
            } catch (java.lang.Throwable t_) {
                throwable_ = t_;
            }

            return getCompletedFuture_objectfabric(result_, throwable_, callback, asyncOptions);
        } else {
            com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version) createVersion_objectfabric(com.objectfabric.security.shiro.ShiroObjectModel.Method1.INSTANCE);

            if (session != null) {
                version_._session = session;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method1.SESSION_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.security.shiro.ShiroObjectModel.Method1.INSTANCE, version_, METHOD_1, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void bindImplementation(java.lang.String session) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void bindImplementationAsync(java.lang.String session, com.objectfabric.MethodCall call) {
        try {
            bindImplementation(session);
            call.set(null);
        } catch (java.lang.Throwable t_) {
            call.setException(t_);
        }
    }


    /**
     * Deletes current session
     * <nl>
     * 
     */
    public final void logout() {
        logout(getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Deletes current session
     * <nl>
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void logout(java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            logoutImplementation();
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = logoutAsync(getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Deletes current session
     * <nl>
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> logoutAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return logoutAsync(callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Deletes current session
     * <nl>
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> logoutAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return logoutAsync(callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Deletes current session
     * <nl>
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> logoutAsync(com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Throwable throwable_ = null;

            try {
                logoutImplementation();
            } catch (java.lang.Throwable t_) {
                throwable_ = t_;
            }

            return getCompletedFuture_objectfabric(result_, throwable_, callback, asyncOptions);
        } else {
            com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version) createVersion_objectfabric(com.objectfabric.security.shiro.ShiroObjectModel.Method2.INSTANCE);

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.security.shiro.ShiroObjectModel.Method2.INSTANCE, version_, METHOD_2, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void logoutImplementation() {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void logoutImplementationAsync(com.objectfabric.MethodCall call) {
        try {
            logoutImplementation();
            call.set(null);
        } catch (java.lang.Throwable t_) {
            call.setException(t_);
        }
    }


    /**
     * 
     */
    public final com.objectfabric.security.shiro.Account createAccount(java.lang.String username, java.lang.String password) {
        return createAccount(username, password, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final com.objectfabric.security.shiro.Account createAccount(java.lang.String username, java.lang.String password, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            return createAccountImplementation(username, password);
        else {
            java.util.concurrent.Future<com.objectfabric.security.shiro.Account> future_ = createAccountAsync(username, password, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<com.objectfabric.security.shiro.Account> createAccountAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<com.objectfabric.security.shiro.Account> callback) {
        return createAccountAsync(username, password, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<com.objectfabric.security.shiro.Account> createAccountAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<com.objectfabric.security.shiro.Account> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return createAccountAsync(username, password, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<com.objectfabric.security.shiro.Account> createAccountAsync(java.lang.String username, java.lang.String password, com.objectfabric.misc.AsyncCallback<com.objectfabric.security.shiro.Account> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            com.objectfabric.security.shiro.Account result_ = null;
            java.lang.Throwable throwable_ = null;

            try {
                result_ = createAccountImplementation(username, password);
            } catch (java.lang.Throwable t_) {
                throwable_ = t_;
            }

            return getCompletedFuture_objectfabric(result_, throwable_, callback, asyncOptions);
        } else {
            com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) createVersion_objectfabric(com.objectfabric.security.shiro.ShiroObjectModel.Method3.INSTANCE);

            if (username != null) {
                version_._username = username;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method3.USERNAME_INDEX);
            }

            if (password != null) {
                version_._password = password;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method3.PASSWORD_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.security.shiro.ShiroObjectModel.Method3.INSTANCE, version_, METHOD_3, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected com.objectfabric.security.shiro.Account createAccountImplementation(java.lang.String username, java.lang.String password) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void createAccountImplementationAsync(java.lang.String username, java.lang.String password, com.objectfabric.MethodCall call) {
        try {
            call.set(createAccountImplementation(username, password));
        } catch (java.lang.Throwable t_) {
            call.setException(t_);
        }
    }


    /**
     * 
     */
    public final void deleteAccount(java.lang.String username) {
        deleteAccount(username, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    public final void deleteAccount(java.lang.String username, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            deleteAccountImplementation(username);
        else {
            java.util.concurrent.Future<java.lang.Void> future_ = deleteAccountAsync(username, getNopCallback_objectfabric(), null, executor);

            try {
                future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    public final java.util.concurrent.Future<java.lang.Void> deleteAccountAsync(java.lang.String username, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback) {
        return deleteAccountAsync(username, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    public final java.util.concurrent.Future<java.lang.Void> deleteAccountAsync(java.lang.String username, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return deleteAccountAsync(username, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    public final java.util.concurrent.Future<java.lang.Void> deleteAccountAsync(java.lang.String username, com.objectfabric.misc.AsyncCallback<java.lang.Void> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            java.lang.Void result_ = null;
            java.lang.Throwable throwable_ = null;

            try {
                deleteAccountImplementation(username);
            } catch (java.lang.Throwable t_) {
                throwable_ = t_;
            }

            return getCompletedFuture_objectfabric(result_, throwable_, callback, asyncOptions);
        } else {
            com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version) createVersion_objectfabric(com.objectfabric.security.shiro.ShiroObjectModel.Method4.INSTANCE);

            if (username != null) {
                version_._username = username;
                version_.setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method4.USERNAME_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.security.shiro.ShiroObjectModel.Method4.INSTANCE, version_, METHOD_4, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected void deleteAccountImplementation(java.lang.String username) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void deleteAccountImplementationAsync(java.lang.String username, com.objectfabric.MethodCall call) {
        try {
            deleteAccountImplementation(username);
            call.set(null);
        } catch (java.lang.Throwable t_) {
            call.setException(t_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) getMethodVersion_objectfabric(call);
                java.lang.String username = version_ != null ? (java.lang.String) version_._username : null;
                java.lang.String password = version_ != null ? (java.lang.String) version_._password : null;

                try {
                    loginImplementationAsync(username, password, call);
                } catch (java.lang.Throwable t_) {
                    call.setException(t_);
                }

                break;
            }
            case METHOD_1: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version) getMethodVersion_objectfabric(call);
                java.lang.String session = version_ != null ? (java.lang.String) version_._session : null;

                try {
                    bindImplementationAsync(session, call);
                } catch (java.lang.Throwable t_) {
                    call.setException(t_);
                }

                break;
            }
            case METHOD_2: {
                try {
                    logoutImplementationAsync(call);
                } catch (java.lang.Throwable t_) {
                    call.setException(t_);
                }

                break;
            }
            case METHOD_3: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) getMethodVersion_objectfabric(call);
                java.lang.String username = version_ != null ? (java.lang.String) version_._username : null;
                java.lang.String password = version_ != null ? (java.lang.String) version_._password : null;

                try {
                    createAccountImplementationAsync(username, password, call);
                } catch (java.lang.Throwable t_) {
                    call.setException(t_);
                }

                break;
            }
            case METHOD_4: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version version_ = (com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version) getMethodVersion_objectfabric(call);
                java.lang.String username = version_ != null ? (java.lang.String) version_._username : null;

                try {
                    deleteAccountImplementationAsync(username, call);
                } catch (java.lang.Throwable t_) {
                    call.setException(t_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) version)._return_objectfabric = (java.lang.String) result;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method0.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_1: {
                break;
            }
            case METHOD_2: {
                break;
            }
            case METHOD_3: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) version)._return_objectfabric = (com.objectfabric.security.shiro.Account) result;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method3.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_4: {
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) version)._error_objectfabric = error;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method0.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_1: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version) version)._error_objectfabric = error;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method1.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_2: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version) version)._error_objectfabric = error;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method2.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_3: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) version)._error_objectfabric = error;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method3.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            case METHOD_4: {
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version) version)._error_objectfabric = error;
                ((com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version) version).setBit(com.objectfabric.security.shiro.ShiroObjectModel.Method4.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version version = (com.objectfabric.security.shiro.ShiroObjectModel.Method0.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_1: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version version = (com.objectfabric.security.shiro.ShiroObjectModel.Method1.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_2: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version version = (com.objectfabric.security.shiro.ShiroObjectModel.Method2.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_3: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version version = (com.objectfabric.security.shiro.ShiroObjectModel.Method3.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            case METHOD_4: {
                com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version version = (com.objectfabric.security.shiro.ShiroObjectModel.Method4.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public com.objectfabric.TObject _store;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, STORE_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case STORE_INDEX:
                    return getUserTObject_objectfabric(_store);
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case STORE_INDEX:
                    _store = (com.objectfabric.security.shiro.ShiroStore) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            ShiroBase.Version source = (ShiroBase.Version) next;
            ShiroBase.Version merged = (ShiroBase.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(STORE_INDEX))
                    merged._store = mergeTObject(merged._store, source._store);
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case STORE_INDEX: {
                    writer.writeTObject(_store);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case STORE_INDEX: {
                    ShiroBase.Version shared = (ShiroBase.Version) getUnion();
                    shared._store = getSharedVersion_objectfabric(reader.readTObject());

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(STORE_INDEX);
                    unsetBit(STORE_INDEX);
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new ShiroBase.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return com.objectfabric.security.shiro.ShiroObjectModel.COM_OBJECTFABRIC_SECURITY_SHIRO_SHIRO_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return com.objectfabric.security.shiro.ShiroObjectModel.getInstance();
        }
    }
}

/**
 * Copyright (c) ObjectFabric Inc. All rights reserved.
 *
 * This file is part of ObjectFabric (objectfabric.com).
 *
 * ObjectFabric is licensed under the Apache License, Version 2.0, the terms
 * of which may be found at http://www.apache.org/licenses/LICENSE-2.0.html.
 *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

package com.objectfabric;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
abstract class IndexBase extends com.objectfabric.TGeneratedFields32 {

    protected IndexBase() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    protected IndexBase(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected IndexBase(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(com.objectfabric.DefaultObjectModel.getInstance(), com.objectfabric.DefaultObjectModelBase.COM_OBJECTFABRIC_INDEX_CLASS_ID);

    public static final int FIELD_COUNT = 0;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public java.lang.Class getFieldClass(int index) {
        return getFieldClassStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.Class getFieldClassStatic(int index) {
        switch (index) {
            default:
                throw new IllegalArgumentException();
        }
    }

    // Methods

    protected static final int METHOD_0 = 0;

    /**
     * 
     */
    protected final com.objectfabric.TObject fetch(byte[] ref) {
        return fetch(ref, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    protected final com.objectfabric.TObject fetch(byte[] ref, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance())
            return fetchImplementation(ref);
        else {
            java.util.concurrent.Future<com.objectfabric.TObject> future_ = fetchAsync(ref, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (java.lang.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (java.util.concurrent.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    protected final java.util.concurrent.Future<com.objectfabric.TObject> fetchAsync(byte[] ref, com.objectfabric.misc.AsyncCallback<com.objectfabric.TObject> callback) {
        return fetchAsync(ref, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    protected final java.util.concurrent.Future<com.objectfabric.TObject> fetchAsync(byte[] ref, com.objectfabric.misc.AsyncCallback<com.objectfabric.TObject> callback, com.objectfabric.AsyncOptions asyncOptions) {
        return fetchAsync(ref, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    protected final java.util.concurrent.Future<com.objectfabric.TObject> fetchAsync(byte[] ref, com.objectfabric.misc.AsyncCallback<com.objectfabric.TObject> callback, com.objectfabric.AsyncOptions asyncOptions, java.util.concurrent.Executor executor) {
        if (executor == com.objectfabric.misc.TransparentExecutor.getInstance()) {
            com.objectfabric.TObject result_ = null;
            java.lang.Exception exception_ = null;

            try {
                result_ = fetchImplementation(ref);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            com.objectfabric.DefaultObjectModel.Method1.Version version_ = (com.objectfabric.DefaultObjectModel.Method1.Version) createVersion_objectfabric(com.objectfabric.DefaultObjectModel.Method1.INSTANCE);

            if (ref != null) {
                version_._ref = ref;
                version_.setBit(com.objectfabric.DefaultObjectModel.Method1.REF_INDEX);
            }

            com.objectfabric.TObject.UserTObject.LocalMethodCall call_ = new com.objectfabric.TObject.UserTObject.LocalMethodCall(this, com.objectfabric.DefaultObjectModel.Method1.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected com.objectfabric.TObject fetchImplementation(byte[] ref) {
        throw new RuntimeException(com.objectfabric.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void fetchImplementationAsync(byte[] ref, com.objectfabric.MethodCall call) {
        try {
            call.set(fetchImplementation(ref));
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                com.objectfabric.DefaultObjectModel.Method1.Version version_ = (com.objectfabric.DefaultObjectModel.Method1.Version) getMethodVersion_objectfabric(call);
                byte[] ref = version_ != null ? (byte[]) version_._ref : null;

                try {
                    fetchImplementationAsync(ref, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                ((com.objectfabric.DefaultObjectModel.Method1.Version) version)._return_objectfabric = (com.objectfabric.TObject) result;
                ((com.objectfabric.DefaultObjectModel.Method1.Version) version).setBit(com.objectfabric.DefaultObjectModel.Method1.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(com.objectfabric.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((com.objectfabric.DefaultObjectModel.Method1.Version) version)._error_objectfabric = error;
                ((com.objectfabric.DefaultObjectModel.Method1.Version) version).setBit(com.objectfabric.DefaultObjectModel.Method1.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(com.objectfabric.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                com.objectfabric.DefaultObjectModel.Method1.Version version = (com.objectfabric.DefaultObjectModel.Method1.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new com.objectfabric.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            IndexBase.Version merged = (IndexBase.Version) super.merge(target, next, flags);
            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new IndexBase.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return com.objectfabric.DefaultObjectModelBase.COM_OBJECTFABRIC_INDEX_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return com.objectfabric.DefaultObjectModel.getInstance();
        }
    }
}

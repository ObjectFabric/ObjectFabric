/**
 * Copyright (c) ObjectFabric Inc. All rights reserved.
 *
 * This file is part of ObjectFabric (objectfabric.com).
 *
 * ObjectFabric is licensed under the Apache License, Version 2.0, the terms
 * of which may be found at http://www.apache.org/licenses/LICENSE-2.0.html.
 *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

package of4gwt;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
abstract class LazyMapBase<K> extends of4gwt.TKeyed<K> {

    protected LazyMapBase(of4gwt.TObject.Version shared, of4gwt.Transaction trunk) {
        super(shared, trunk);
    }

    public static final of4gwt.TType TYPE = new of4gwt.TType(of4gwt.DefaultObjectModel.getInstance(), of4gwt.DefaultObjectModelBase.COM_OBJECTFABRIC_LAZYMAP_CLASS_ID);

    // Methods

    protected static final int METHOD_0 = 0;

    /**
     * 
     */
    protected final java.lang.Object fetch(java.lang.Object key) {
        return fetch(key, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Specifies the Executor or TaskScheduler that will run the method. For replicated objects, the method runs by default on the site the object has been created, using site's method executor.
     */
    protected final java.lang.Object fetch(java.lang.Object key, of4gwt.misc.Executor executor) {
        if (executor == of4gwt.misc.TransparentExecutor.getInstance())
            return fetchImplementation(key);
        else {
            of4gwt.misc.Future<java.lang.Object> future_ = fetchAsync(key, getNopCallback_objectfabric(), null, executor);

            try {
                return future_.get();
            } catch (of4gwt.misc.InterruptedException ex_) {
                throw new RuntimeException(ex_);
            } catch (of4gwt.misc.ExecutionException ex_) {
                if (ex_.getCause() instanceof RuntimeException)
                    throw (RuntimeException) ex_.getCause();

                throw new RuntimeException(ex_.getCause());
            }
        }
    }

    /**
     * Asynchronous version.
     */
    protected final of4gwt.misc.Future<java.lang.Object> fetchAsync(java.lang.Object key, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Object> callback) {
        return fetchAsync(key, callback, getDefaultAsyncOptions_objectfabric(), getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback.
     */
    protected final of4gwt.misc.Future<java.lang.Object> fetchAsync(java.lang.Object key, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Object> callback, of4gwt.AsyncOptions asyncOptions) {
        return fetchAsync(key, callback, asyncOptions, getDefaultMethodExecutor_objectfabric());
    }

    /**
     * Asynchronous version, with options for the callback, and specifies the Executor or TaskScheduler that will run the method. For replicated objects,
     * the method runs by default on the site the object has been created. @see Site.getMethodExecutor() to specify an execution site.
     */
    protected final of4gwt.misc.Future<java.lang.Object> fetchAsync(java.lang.Object key, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Object> callback, of4gwt.AsyncOptions asyncOptions, of4gwt.misc.Executor executor) {
        if (executor == of4gwt.misc.TransparentExecutor.getInstance()) {
            java.lang.Object result_ = null;
            java.lang.Exception exception_ = null;

            try {
                result_ = fetchImplementation(key);
            } catch (java.lang.Exception e_) {
                exception_ = e_;
            }

            return getCompletedFuture_objectfabric(result_, exception_, callback, asyncOptions);
        } else {
            of4gwt.DefaultObjectModel.Method0.Version version_ = (of4gwt.DefaultObjectModel.Method0.Version) createVersion_objectfabric(of4gwt.DefaultObjectModel.Method0.INSTANCE);

            if (key != null) {
                version_._key = key;
                version_.setBit(of4gwt.DefaultObjectModel.Method0.KEY_INDEX);
            }

            of4gwt.TObject.UserTObject.LocalMethodCall call_ = new of4gwt.TObject.UserTObject.LocalMethodCall(this, of4gwt.DefaultObjectModel.Method0.INSTANCE, version_, METHOD_0, callback, asyncOptions);
            executor.execute(call_);
            return call_;
        }
    }

    /**
     * Override to implement the method.
     */
    protected java.lang.Object fetchImplementation(java.lang.Object key) {
        throw new RuntimeException(of4gwt.Strings.MISSING_METHOD_CALL_IMPLEMENTATION);
    }

    /**
     * Override to implement the method asynchronously.
     */
    protected void fetchImplementationAsync(java.lang.Object key, of4gwt.MethodCall call) {
        try {
            call.set(fetchImplementation(key));
        } catch (java.lang.Exception e_) {
            call.setException(e_);
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void invoke_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                of4gwt.DefaultObjectModel.Method0.Version version_ = (of4gwt.DefaultObjectModel.Method0.Version) getMethodVersion_objectfabric(call);
                java.lang.Object key = version_ != null ? (java.lang.Object) version_._key : null;

                try {
                    fetchImplementationAsync(key, call);
                } catch (java.lang.Exception e_) {
                    call.setException(e_);
                }

                break;
            }
            default: {
                super.invoke_objectfabric(call);
                break;
            }
        }
    }

    @SuppressWarnings({ "static-access", "cast" })
    @Override
    protected void setResult_objectfabric(of4gwt.TObject.Version version, int index, java.lang.Object result) {
        switch (index) {
            case METHOD_0: {
                ((of4gwt.DefaultObjectModel.Method0.Version) version)._return_objectfabric = (java.lang.Object) result;
                ((of4gwt.DefaultObjectModel.Method0.Version) version).setBit(of4gwt.DefaultObjectModel.Method0.RETURN_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setResult_objectfabric(version, index, result);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void setError_objectfabric(of4gwt.TObject.Version version, int index, java.lang.String error) {
        switch (index) {
            case METHOD_0: {
                ((of4gwt.DefaultObjectModel.Method0.Version) version)._error_objectfabric = error;
                ((of4gwt.DefaultObjectModel.Method0.Version) version).setBit(of4gwt.DefaultObjectModel.Method0.ERROR_OBJECTFABRIC_INDEX);
                break;
            }
            default: {
                super.setError_objectfabric(version, index, error);
                break;
            }
        }
    }

    @SuppressWarnings("static-access")
    @Override
    protected void getResultOrError_objectfabric(of4gwt.MethodCall call) {
        switch (getMethodCallIndex_objectfabric(call)) {
            case METHOD_0: {
                of4gwt.DefaultObjectModel.Method0.Version version = (of4gwt.DefaultObjectModel.Method0.Version) getMethodVersion_objectfabric(call);

                if (version == null || version._error_objectfabric == null)
                    setDirect(call, version != null ? version._return_objectfabric : null);
                else
                    setExceptionDirect(call, new of4gwt.misc.ReplicatedException(version._error_objectfabric));

                break;
            }
            default: {
                super.getResultOrError_objectfabric(call);
                break;
            }
        }
    }
}

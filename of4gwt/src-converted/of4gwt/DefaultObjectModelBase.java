/**
 * Copyright (c) ObjectFabric Inc. All rights reserved.
 *
 * This file is part of ObjectFabric (objectfabric.com).
 *
 * ObjectFabric is licensed under the Apache License, Version 2.0, the terms
 * of which may be found at http://www.apache.org/licenses/LICENSE-2.0.html.
 *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

package of4gwt;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access" })
abstract class DefaultObjectModelBase extends of4gwt.ObjectModel {

    private static final byte[] UID = { 2, 72, 68, 90, -92, -76, -96, -87, -79, -13, -80, 19, 70, 106, 112, 36 };

    private static volatile DefaultObjectModel _instance;

    private static final Object _lock = new Object();

    protected DefaultObjectModelBase(of4gwt.TObject.Version shared) {
        super(shared);
    }

    public static DefaultObjectModel getInstance() {
        if (_instance == null) {
            synchronized (_lock) {
                if (_instance == null)
                    _instance = new DefaultObjectModel();
            }
        }

        return _instance;
    }

    public static byte[] getUID() {
        byte[] copy = new byte[UID.length];
        of4gwt.misc.PlatformAdapter.arraycopy(UID, 0, copy, 0, copy.length);
        return copy;
    }

    /**
     * Registers this object model so that its classes can be serialized by the
     * system.
     */
    public static void register() {
        register(getInstance());
    }

    /**
     * Registers an object model which can override <code>createInstance</code>
     * to let the system use your own derived classes. This is necessary e.g. to
     * implement remote methods on transactional objects.
     */
    public static void registerOverridenModel(DefaultObjectModel model) {
        synchronized (_lock) {
            if (_instance != null)
                throw new RuntimeException("Object model has already been registered. This method can only be called at program startup.");

            _instance = model;
        }

        register(model);
    }

    @Override
    protected java.lang.String getObjectFabricVersion() {
        return "0.8";
    }

    public static final int CLASS_COUNT = 6;

    public static final int COM_OBJECTFABRIC_CONNECTION_CLASS_ID = 0;

    public static final int COM_OBJECTFABRIC_INDEX_CLASS_ID = 1;

    public static final int COM_OBJECTFABRIC_LAZYMAP_CLASS_ID = 2;

    public static final int COM_OBJECTFABRIC_SESSION_CLASS_ID = 3;

    public static final int COM_OBJECTFABRIC_SITE_CLASS_ID = 4;

    public static final int COM_OBJECTFABRIC_TRANSACTION_CLASS_ID = 5;

    public static final int METHOD_COUNT = 2;

    public static final int COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_0_ID = 6;

    public static final int COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_1_ID = 7;

    @Override
    protected java.lang.Class getClass(int classId, of4gwt.TType[] genericParameters) {
        switch (classId) {
            case COM_OBJECTFABRIC_CONNECTION_CLASS_ID:
                return of4gwt.Connection.class;
            case COM_OBJECTFABRIC_INDEX_CLASS_ID:
                return of4gwt.Index.class;
            case COM_OBJECTFABRIC_LAZYMAP_CLASS_ID:
                return of4gwt.LazyMap.class;
            case COM_OBJECTFABRIC_SESSION_CLASS_ID:
                return of4gwt.Session.class;
            case COM_OBJECTFABRIC_SITE_CLASS_ID:
                return of4gwt.Site.class;
            case COM_OBJECTFABRIC_TRANSACTION_CLASS_ID:
                return of4gwt.Transaction.class;
            case COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_0_ID:
                return Method0.class;
            case COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_1_ID:
                return Method1.class;
        }

        return super.getClass(classId, genericParameters);
    }

    @Override
    protected of4gwt.TObject.UserTObject createInstance(of4gwt.Transaction trunk, int classId, of4gwt.TType[] genericParameters) {
        switch (classId) {
            case COM_OBJECTFABRIC_CONNECTION_CLASS_ID:
                return new of4gwt.Connection(trunk, null);
            case COM_OBJECTFABRIC_INDEX_CLASS_ID:
                return new of4gwt.Index(trunk);
            case COM_OBJECTFABRIC_LAZYMAP_CLASS_ID:
                return new of4gwt.LazyMap(trunk);
            case COM_OBJECTFABRIC_SESSION_CLASS_ID:
                return new of4gwt.Session(trunk, null, null);
            case COM_OBJECTFABRIC_SITE_CLASS_ID:
                return new of4gwt.Site(trunk);
            case COM_OBJECTFABRIC_TRANSACTION_CLASS_ID:
                return new of4gwt.Transaction(trunk, null, 0, null, null, null);
            case COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_0_ID:
                return new Method0(trunk);
            case COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_1_ID:
                return new Method1(trunk);
        }

        return super.createInstance(trunk, classId, genericParameters);
    }

    protected static final class Version extends of4gwt.ObjectModel.Version {

        public Version(of4gwt.ObjectModel.Version shared) {
            super(shared);
        }

        @Override
        public byte[] getUID() {
            return DefaultObjectModelBase.UID;
        }
    }

    public static class Method0 extends of4gwt.TGeneratedFields32 implements of4gwt.TObject.UserTObject.Method {

        public static final Method0 INSTANCE = new Method0(of4gwt.Site.getLocal().getTrunk());

        public Method0(of4gwt.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "fetch";
        }

        public static final of4gwt.TType TYPE = new of4gwt.TType(of4gwt.DefaultObjectModel.getInstance(), of4gwt.DefaultObjectModelBase.COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_0_ID);

        public static final int KEY_INDEX = 0;

        public static final java.lang.String KEY_NAME = "key";

        public static final java.lang.Class KEY_CLASS = java.lang.Object.class;

        public static final int RETURN_OBJECTFABRIC_INDEX = 1;

        public static final java.lang.String RETURN_OBJECTFABRIC_NAME = "return_objectfabric";

        public static final java.lang.Class RETURN_OBJECTFABRIC_CLASS = java.lang.Object.class;

        public static final int ERROR_OBJECTFABRIC_INDEX = 2;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final java.lang.Class ERROR_OBJECTFABRIC_CLASS = java.lang.String.class;

        public static final int FIELD_COUNT = 3;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case KEY_INDEX:
                    return KEY_NAME;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_NAME;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public java.lang.Class getFieldClass(int index) {
            return getFieldClassStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.Class getFieldClassStatic(int index) {
            switch (index) {
                case KEY_INDEX:
                    return KEY_CLASS;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_CLASS;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_CLASS;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends of4gwt.TGeneratedFields32.Version {

            public java.lang.Object _key;

            public java.lang.Object _return_objectfabric;

            public java.lang.String _error_objectfabric;

            public Version(of4gwt.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public of4gwt.TObject.Version merge(of4gwt.TObject.Version target, of4gwt.TObject.Version next, int flags) {
                Method0.Version source = (Method0.Version) next;
                Method0.Version merged = (Method0.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(KEY_INDEX))
                        merged._key = mergeObject(merged._key, source._key);

                    if (source.getBit(RETURN_OBJECTFABRIC_INDEX))
                        merged._return_objectfabric = mergeObject(merged._return_objectfabric, source._return_objectfabric);

                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(of4gwt.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case KEY_INDEX: {
                        writer.writeObject(_key);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        writer.writeObject(_return_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(of4gwt.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case KEY_INDEX: {
                        _key = reader.readObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        _return_objectfabric = reader.readObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public of4gwt.TObject.Version createRead() {
                return null;
            }

            @Override
            public of4gwt.TObject.Version createVersion() {
                return new Method0.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return of4gwt.DefaultObjectModelBase.COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_0_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public of4gwt.ObjectModel getObjectModel() {
                return of4gwt.DefaultObjectModel.getInstance();
            }
        }
    }

    public static class Method1 extends of4gwt.TGeneratedFields32 implements of4gwt.TObject.UserTObject.Method {

        public static final Method1 INSTANCE = new Method1(of4gwt.Site.getLocal().getTrunk());

        public Method1(of4gwt.Transaction trunk) {
            super(new Version(null, FIELD_COUNT), trunk);
        }

        public String getName() {
            return "fetch";
        }

        public static final of4gwt.TType TYPE = new of4gwt.TType(of4gwt.DefaultObjectModel.getInstance(), of4gwt.DefaultObjectModelBase.COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_1_ID);

        public static final int REF_INDEX = 0;

        public static final java.lang.String REF_NAME = "ref";

        public static final java.lang.Class REF_CLASS = byte[].class;

        public static final int RETURN_OBJECTFABRIC_INDEX = 1;

        public static final java.lang.String RETURN_OBJECTFABRIC_NAME = "return_objectfabric";

        public static final java.lang.Class RETURN_OBJECTFABRIC_CLASS = of4gwt.TObject.class;

        public static final int ERROR_OBJECTFABRIC_INDEX = 2;

        public static final java.lang.String ERROR_OBJECTFABRIC_NAME = "error_objectfabric";

        public static final java.lang.Class ERROR_OBJECTFABRIC_CLASS = java.lang.String.class;

        public static final int FIELD_COUNT = 3;

        @Override
        public int getFieldCount() {
            return FIELD_COUNT;
        }

        @Override
        public java.lang.String getFieldName(int index) {
            return getFieldNameStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.String getFieldNameStatic(int index) {
            switch (index) {
                case REF_INDEX:
                    return REF_NAME;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_NAME;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_NAME;
                default:
                    throw new IllegalArgumentException();
            }
        }

        @Override
        public java.lang.Class getFieldClass(int index) {
            return getFieldClassStatic(index);
        }

        @SuppressWarnings("static-access")
        public static java.lang.Class getFieldClassStatic(int index) {
            switch (index) {
                case REF_INDEX:
                    return REF_CLASS;
                case RETURN_OBJECTFABRIC_INDEX:
                    return RETURN_OBJECTFABRIC_CLASS;
                case ERROR_OBJECTFABRIC_INDEX:
                    return ERROR_OBJECTFABRIC_CLASS;
                default:
                    throw new IllegalArgumentException();
            }
        }

        public static class Version extends of4gwt.TGeneratedFields32.Version {

            public byte[] _ref;

            public of4gwt.TObject _return_objectfabric;

            public java.lang.String _error_objectfabric;

            public Version(of4gwt.TGeneratedFields32.Version shared, int length) {
                super(shared, length);
            }

            @Override
            public of4gwt.TObject.Version merge(of4gwt.TObject.Version target, of4gwt.TObject.Version next, int flags) {
                Method1.Version source = (Method1.Version) next;
                Method1.Version merged = (Method1.Version) super.merge(target, next, flags);

                if (source.hasBits()) {
                    if (source.getBit(REF_INDEX))
                        merged._ref = source._ref;

                    if (source.getBit(RETURN_OBJECTFABRIC_INDEX))
                        merged._return_objectfabric = mergeTObject(merged._return_objectfabric, source._return_objectfabric);

                    if (source.getBit(ERROR_OBJECTFABRIC_INDEX))
                        merged._error_objectfabric = source._error_objectfabric;
                }

                return merged;
            }

            @Override
            public void writeWrite(of4gwt.Writer writer, int index) {
                if (writer.interrupted())
                    writer.resume();

                switch (index) {
                    case REF_INDEX: {
                        writer.writeBinary(_ref);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        writer.writeTObject(_return_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        writer.writeString(_error_objectfabric);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.writeWrite(writer, index);

                        if (writer.interrupted()) {
                            writer.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public void readWrite(of4gwt.Reader reader, int index) {
                if (reader.interrupted())
                    reader.resume();

                switch (index) {
                    case REF_INDEX: {
                        _ref = reader.readBinary();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case RETURN_OBJECTFABRIC_INDEX: {
                        _return_objectfabric = reader.readTObject();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    case ERROR_OBJECTFABRIC_INDEX: {
                        _error_objectfabric = reader.readString();

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                    default: {
                        super.readWrite(reader, index);

                        if (reader.interrupted()) {
                            reader.interrupt(null);
                            return;
                        }
                        break;
                    }
                }
            }

            @Override
            public of4gwt.TObject.Version createRead() {
                return null;
            }

            @Override
            public of4gwt.TObject.Version createVersion() {
                return new Method1.Version(this, FIELD_COUNT);
            }

            @Override
            public int getClassId() {
                return of4gwt.DefaultObjectModelBase.COM_OBJECTFABRIC_DEFAULTOBJECTMODELBASE_METHOD_1_ID;
            }

            @SuppressWarnings("static-access")
            @Override
            public of4gwt.ObjectModel getObjectModel() {
                return of4gwt.DefaultObjectModel.getInstance();
            }
        }
    }
}

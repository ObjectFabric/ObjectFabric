/**
 * Copyright (c) ObjectFabric Inc. All rights reserved.
 *
 * This file is part of ObjectFabric (objectfabric.com).
 *
 * ObjectFabric is licensed under the Apache License, Version 2.0, the terms
 * of which may be found at http://www.apache.org/licenses/LICENSE-2.0.html.
 *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

package com.objectfabric.generated;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
public class PersistenceClass extends com.objectfabric.TGeneratedFields32 {

    public PersistenceClass() {
        this(com.objectfabric.Transaction.getDefaultTrunk());
    }

    public PersistenceClass(com.objectfabric.Transaction trunk) {
        this(new Version(null, FIELD_COUNT), trunk);
    }

    protected PersistenceClass(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk) {
        super(shared, trunk);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(com.objectfabric.generated.PersistenceObjectModel.getInstance(), com.objectfabric.generated.PersistenceObjectModel.COM_OBJECTFABRIC_GENERATED_PERSISTENCECLASS_CLASS_ID);

    public final java.lang.String getText() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, TEXT_INDEX);
        java.lang.String value = v != null ? v._text : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setText(java.lang.String value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._text = value;
        v.setBit(TEXT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final int getInt() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, INT_INDEX);
        int value = v != null ? v._int : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setInt(int value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._int = value;
        v.setBit(INT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final long getLong() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, LONG_INDEX);
        long value = v != null ? v._long : 0;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setLong(long value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._long = value;
        v.setBit(LONG_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.Double getDouble() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, DOUBLE_INDEX);
        java.lang.Double value = v != null ? v._double : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setDouble(java.lang.Double value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._double = value;
        v.setBit(DOUBLE_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.Object getObject() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, OBJECT_INDEX);
        java.lang.Object value = v != null ? getUserTObject_objectfabric(v._object) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setObject(java.lang.Object value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._object = value;
        v.setBit(OBJECT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final byte[] getBytes() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, BYTES_INDEX);
        byte[] value = v != null ? v._bytes : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setBytes(byte[] value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._bytes = value;
        v.setBit(BYTES_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int TEXT_INDEX = 0;

    public static final java.lang.String TEXT_NAME = "text";

    public static final com.objectfabric.TType TEXT_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

    public static final int INT_INDEX = 1;

    public static final java.lang.String INT_NAME = "int";

    public static final com.objectfabric.TType INT_TYPE = com.objectfabric.ImmutableClass.INTEGER.getType();

    public static final int LONG_INDEX = 2;

    public static final java.lang.String LONG_NAME = "long";

    public static final com.objectfabric.TType LONG_TYPE = com.objectfabric.ImmutableClass.LONG.getType();

    public static final int DOUBLE_INDEX = 3;

    public static final java.lang.String DOUBLE_NAME = "double";

    public static final com.objectfabric.TType DOUBLE_TYPE = com.objectfabric.ImmutableClass.DOUBLE_BOXED.getType();

    public static final int OBJECT_INDEX = 4;

    public static final java.lang.String OBJECT_NAME = "object";

    public static final com.objectfabric.TType OBJECT_TYPE = com.objectfabric.TType.OBJECT;

    public static final int BYTES_INDEX = 5;

    public static final java.lang.String BYTES_NAME = "bytes";

    public static final com.objectfabric.TType BYTES_TYPE = com.objectfabric.ImmutableClass.BINARY.getType();

    public static final int FIELD_COUNT = 6;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_NAME;
            case INT_INDEX:
                return INT_NAME;
            case LONG_INDEX:
                return LONG_NAME;
            case DOUBLE_INDEX:
                return DOUBLE_NAME;
            case OBJECT_INDEX:
                return OBJECT_NAME;
            case BYTES_INDEX:
                return BYTES_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  com.objectfabric.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static com.objectfabric.TType getFieldTypeStatic(int index) {
        switch (index) {
            case TEXT_INDEX:
                return TEXT_TYPE;
            case INT_INDEX:
                return INT_TYPE;
            case LONG_INDEX:
                return LONG_TYPE;
            case DOUBLE_INDEX:
                return DOUBLE_TYPE;
            case OBJECT_INDEX:
                return OBJECT_TYPE;
            case BYTES_INDEX:
                return BYTES_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _text;

        public int _int;

        public long _long;

        public java.lang.Double _double;

        public java.lang.Object _object;

        public byte[] _bytes;

        static {
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case TEXT_INDEX:
                    return _text;
                case INT_INDEX:
                    return _int;
                case LONG_INDEX:
                    return _long;
                case DOUBLE_INDEX:
                    return _double;
                case OBJECT_INDEX:
                    return _object;
                case BYTES_INDEX:
                    return _bytes;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case TEXT_INDEX:
                    _text = (java.lang.String) value;
                    break;
                case INT_INDEX:
                    _int = ((java.lang.Integer) value).intValue();
                    break;
                case LONG_INDEX:
                    _long = ((java.lang.Long) value).longValue();
                    break;
                case DOUBLE_INDEX:
                    _double = (java.lang.Double) value;
                    break;
                case OBJECT_INDEX:
                    _object = value;
                    break;
                case BYTES_INDEX:
                    _bytes = (byte[]) value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            PersistenceClass.Version source = (PersistenceClass.Version) next;
            PersistenceClass.Version merged = (PersistenceClass.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(TEXT_INDEX))
                    merged._text = source._text;

                if (source.getBit(INT_INDEX))
                    merged._int = source._int;

                if (source.getBit(LONG_INDEX))
                    merged._long = source._long;

                if (source.getBit(DOUBLE_INDEX))
                    merged._double = source._double;

                if (source.getBit(OBJECT_INDEX))
                    merged._object = mergeObject(merged._object, source._object);

                if (source.getBit(BYTES_INDEX))
                    merged._bytes = source._bytes;
            }

            return merged;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case TEXT_INDEX: {
                    writer.writeString(_text);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case INT_INDEX: {
                    if (!writer.canWriteInteger()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeInteger(_int);
                    break;
                }
                case LONG_INDEX: {
                    if (!writer.canWriteLong()) {
                        writer.interrupt(null);
                        return;
                    }

                    writer.writeLong(_long);
                    break;
                }
                case DOUBLE_INDEX: {
                    writer.writeDoubleBoxed(_double);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case OBJECT_INDEX: {
                    writer.writeObject(_object);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case BYTES_INDEX: {
                    writer.writeBinary(_bytes);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case TEXT_INDEX: {
                    _text = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case INT_INDEX: {
                    if (!reader.canReadInteger()) {
                        reader.interrupt(null);
                        return;
                    }

                    _int = reader.readInteger();
                    break;
                }
                case LONG_INDEX: {
                    if (!reader.canReadLong()) {
                        reader.interrupt(null);
                        return;
                    }

                    _long = reader.readLong();
                    break;
                }
                case DOUBLE_INDEX: {
                    _double = reader.readDoubleBoxed();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case OBJECT_INDEX: {
                    _object = reader.readObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case BYTES_INDEX: {
                    _bytes = reader.readBinary();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new PersistenceClass.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return com.objectfabric.generated.PersistenceObjectModel.COM_OBJECTFABRIC_GENERATED_PERSISTENCECLASS_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return com.objectfabric.generated.PersistenceObjectModel.getInstance();
        }
    }
}


package com.objectfabric;

//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY OBJECTFABRIC                                
//                                                                              
//==============================================================================

@SuppressWarnings({ "hiding", "unchecked", "static-access", "unused" })
class Account extends com.objectfabric.TGeneratedFields32 {

    public Account(java.lang.String username) {
        this(com.objectfabric.Transaction.getDefaultTrunk(), username);
    }

    public Account(com.objectfabric.Transaction trunk, java.lang.String username) {
        this(new Version(null, FIELD_COUNT), trunk, username);
    }

    protected Account(com.objectfabric.TObject.Version shared, com.objectfabric.Transaction trunk, java.lang.String username) {
        super(shared, trunk);

        ((Version) shared)._username = username;

        if (username != null)
            ((Version) shared).setBit(USERNAME_INDEX);
    }

    public static final com.objectfabric.TType TYPE = new com.objectfabric.TType(com.objectfabric.ShiroObjectModel.getInstance(), com.objectfabric.ShiroObjectModel.COM_OBJECTFABRIC_ACCOUNT_CLASS_ID);

    public final java.lang.String getUsername() {
        Version v = (Version) getSharedVersion_objectfabric();
        return v._username;
    }

    public final byte[] getPasswordHash() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, PASSWORD_HASH_INDEX);
        byte[] value = v != null ? v._passwordHash : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setPasswordHash(byte[] value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._passwordHash = value;
        v.setBit(PASSWORD_HASH_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final byte[] getSalt() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, SALT_INDEX);
        byte[] value = v != null ? v._salt : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setSalt(byte[] value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._salt = value;
        v.setBit(SALT_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public final java.lang.Object getUserData() {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startRead_objectfabric(outer);
        Version v = (Version) getTIndexed32Version_objectfabric(inner, USER_DATA_INDEX);
        java.lang.Object value = v != null ? getUserTObject_objectfabric(v._userData) : null;
        endRead_objectfabric(outer, inner);
        return value;
    }

    public final void setUserData(java.lang.Object value) {
        com.objectfabric.Transaction outer = com.objectfabric.Transaction.getCurrent();
        com.objectfabric.Transaction inner = startWrite_objectfabric(outer);
        Version v = (Version) getOrCreateVersion_objectfabric(inner);
        v._userData = value;
        v.setBit(USER_DATA_INDEX);
        endWrite_objectfabric(outer, inner);
    }

    public static final int USERNAME_INDEX = 0;

    public static final java.lang.String USERNAME_NAME = "username";

    public static final com.objectfabric.TType USERNAME_TYPE = com.objectfabric.ImmutableClass.STRING.getType();

    public static final int PASSWORD_HASH_INDEX = 1;

    public static final java.lang.String PASSWORD_HASH_NAME = "passwordHash";

    public static final com.objectfabric.TType PASSWORD_HASH_TYPE = com.objectfabric.ImmutableClass.BINARY.getType();

    public static final int SALT_INDEX = 2;

    public static final java.lang.String SALT_NAME = "salt";

    public static final com.objectfabric.TType SALT_TYPE = com.objectfabric.ImmutableClass.BINARY.getType();

    public static final int USER_DATA_INDEX = 3;

    public static final java.lang.String USER_DATA_NAME = "userData";

    public static final com.objectfabric.TType USER_DATA_TYPE = com.objectfabric.TType.OBJECT;

    public static final int FIELD_COUNT = 4;

    @Override
    public int getFieldCount() {
        return FIELD_COUNT;
    }

    @Override
    public java.lang.String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    @SuppressWarnings("static-access")
    public static java.lang.String getFieldNameStatic(int index) {
        switch (index) {
            case USERNAME_INDEX:
                return USERNAME_NAME;
            case PASSWORD_HASH_INDEX:
                return PASSWORD_HASH_NAME;
            case SALT_INDEX:
                return SALT_NAME;
            case USER_DATA_INDEX:
                return USER_DATA_NAME;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public  com.objectfabric.TType getFieldType(int index) {
        return getFieldTypeStatic(index);
    }

    @SuppressWarnings("static-access")
    public static com.objectfabric.TType getFieldTypeStatic(int index) {
        switch (index) {
            case USERNAME_INDEX:
                return USERNAME_TYPE;
            case PASSWORD_HASH_INDEX:
                return PASSWORD_HASH_TYPE;
            case SALT_INDEX:
                return SALT_TYPE;
            case USER_DATA_INDEX:
                return USER_DATA_TYPE;
            default:
                throw new IllegalArgumentException();
        }
    }

    protected static class Version extends com.objectfabric.TGeneratedFields32.Version {

        public java.lang.String _username;

        public byte[] _passwordHash;

        public byte[] _salt;

        public java.lang.Object _userData;

        private static final int _readOnlys;

        static {
            int readOnlys = 0;
            readOnlys = setBit(readOnlys, USERNAME_INDEX);
            _readOnlys = readOnlys;
        }

        public Version(com.objectfabric.TGeneratedFields32.Version shared, int length) {
            super(shared, length);
        }

        @Override
        public java.lang.Object getAsObject(int index) {
            switch (index) {
                case USERNAME_INDEX:
                    return _username;
                case PASSWORD_HASH_INDEX:
                    return _passwordHash;
                case SALT_INDEX:
                    return _salt;
                case USER_DATA_INDEX:
                    return _userData;
                default:
                    return super.getAsObject(index);
            }
        }

        @Override
        public void setAsObject(int index, java.lang.Object value) {
            switch (index) {
                case USERNAME_INDEX:
                    _username = (java.lang.String) value;
                    break;
                case PASSWORD_HASH_INDEX:
                    _passwordHash = (byte[]) value;
                    break;
                case SALT_INDEX:
                    _salt = (byte[]) value;
                    break;
                case USER_DATA_INDEX:
                    _userData = value;
                    break;
                default:
                    super.setAsObject(index, value);
                    break;
            }
        }

        @Override
        public com.objectfabric.TObject.Version merge(com.objectfabric.TObject.Version target, com.objectfabric.TObject.Version next, int flags) {
            Account.Version source = (Account.Version) next;
            Account.Version merged = (Account.Version) super.merge(target, next, flags);

            if (source.hasBits()) {
                if (source.getBit(USERNAME_INDEX))
                    merged._username = source._username;

                if (source.getBit(PASSWORD_HASH_INDEX))
                    merged._passwordHash = source._passwordHash;

                if (source.getBit(SALT_INDEX))
                    merged._salt = source._salt;

                if (source.getBit(USER_DATA_INDEX))
                    merged._userData = mergeObject(merged._userData, source._userData);
            }

            return merged;
        }

        @Override
        public int getReadOnlys() {
            return _readOnlys;
        }

        @Override
        public void writeWrite(com.objectfabric.Writer writer, int index) {
            if (writer.interrupted())
                writer.resume();

            switch (index) {
                case USERNAME_INDEX: {
                    writer.writeString(_username);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case PASSWORD_HASH_INDEX: {
                    writer.writeBinary(_passwordHash);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case SALT_INDEX: {
                    writer.writeBinary(_salt);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                case USER_DATA_INDEX: {
                    writer.writeObject(_userData);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.writeWrite(writer, index);

                    if (writer.interrupted()) {
                        writer.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public void readWrite(com.objectfabric.Reader reader, int index) {
            if (reader.interrupted())
                reader.resume();

            switch (index) {
                case USERNAME_INDEX: {
                    Account.Version shared = (Account.Version) getUnion();
                    shared._username = reader.readString();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }

                    shared.setBit(USERNAME_INDEX);
                    unsetBit(USERNAME_INDEX);
                    break;
                }
                case PASSWORD_HASH_INDEX: {
                    _passwordHash = reader.readBinary();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case SALT_INDEX: {
                    _salt = reader.readBinary();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                case USER_DATA_INDEX: {
                    _userData = reader.readObject();

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
                default: {
                    super.readWrite(reader, index);

                    if (reader.interrupted()) {
                        reader.interrupt(null);
                        return;
                    }
                    break;
                }
            }
        }

        @Override
        public com.objectfabric.TObject.Version createVersion() {
            return new Account.Version(this, FIELD_COUNT);
        }

        @Override
        public int getClassId() {
            return com.objectfabric.ShiroObjectModel.COM_OBJECTFABRIC_ACCOUNT_CLASS_ID;
        }

        @SuppressWarnings("static-access")
        @Override
        public com.objectfabric.ObjectModel getObjectModel() {
            return com.objectfabric.ShiroObjectModel.getInstance();
        }
    }
}
